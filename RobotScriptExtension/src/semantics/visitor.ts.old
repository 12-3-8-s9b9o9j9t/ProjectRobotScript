import * as ASTInterfaces from '../language/generated/ast.js'
import {isAssignVar, isSetSpeed } from '../language/generated/ast.js'

//import { Reference } from 'langium';

export interface RoboScriptVisitor {
    // TODO : create one visit method for each concept of the language
    visitEntryPoint(node: EntryPointVisitor): any
    visitAssign(node: AssignVisitor): any
    visitExpression(node: ExpressionVisitor): any
    visitSensor(node: SensorVisitor): any
    visitStatement(node: StatementVisitor): any
    visitAnyType(node: AnyTypeVisitor): any
    visitAssignVar(node: AssignVarVisitor): any
    visitBinExpr(node: BinExprVisitor): any
    visitBlock(node: BlockVisitor): any
    visitDistance(node: DistanceVisitor): any
    visitFunCall(node: FunCallVisitor): any
    visitFunDef(node: FunDefVisitor): any
    visitGetSpeed(node: GetSpeedVisitor): any
    visitIfStmt(node: IfStmtVisitor): any
    visitLinear(node: LinearVisitor): any
    visitLit(node: LitVisitor): any
    visitRef(node: RefVisitor): any
    visitReturnStmt(node: ReturnStmtVisitor): any
    visitRotation(node: RotationVisitor): any
    visitSetSpeed(node: SetSpeedVisitor): any
    visitTime(node: TimeVisitor): any
    visitUnExpr(node: UnExprVisitor): any
    visitVarDecl(node: VarDeclVisitor): any
    visitWhileStmt(node: WhileStmtVisitor): any
    visitUnitCast(node: UnitCastVisitor): any
    visitSpeed(node: SpeedVisitor): any
}

export class EntryPointVisitor implements ASTInterfaces.EntryPoint {
    // the constructor must take all attribute of the implemented interface
    constructor(public $type: 'EntryPoint') {}
    funs: ASTInterfaces.FunDef[] = []
    accept(visitor: RoboScriptVisitor): any {
        console.log('EntryPointVisitor')
        visitor.visitEntryPoint(this);
        this.funs.forEach(fun => fun.accept(visitor));
    }
}

/** 
export class AssignVisitor implements ASTInterfaces.AssignVisitor {
    // the constructor must take all attribute of the implemented interface
    constructor(public $type: 'Assign') {}
    funs: ASTInterfaces.FunDef[] = []
    accept(visitor: RoboScriptVisitor): any {
        console.log('AssignVisitor')
        visitor.visitAssign(this);
        this.funs.forEach(fun => fun.accept(visitor));
    }
}
*/

export class AnyTypeVisitor implements ASTInterfaces.AnyType {
    constructor(public $type: 'AnyType') {}
    name: 'bool' | 'number' | 'void';

    accept(visitor: RoboScriptVisitor): any {
        return visitor.visitAnyType(this);
    }
}

export class AssignVisitor {
    visitAssign(node: ASTInterfaces.Assign): any {
        if (isAssignVar(node)) {
            return this.visitAssignVar(node);
        } else if (isSetSpeed(node)) {
            return this.visitSetSpeed(node);
        }
        // Gérer les autres types d'Assign au besoin
        throw new Error(`Unknown Assign type: ${node.$type}`);
    }

}

export class visitAssignVar {
    // Implémentez la méthode de visite spécifique pour AssignVar
    visitAssignVar(node: ASTInterfaces.AssignVar): any {
        constructor(
            public $type: 'AssignVar'
            public $container:  Block | IfStmt | WhileStmt
            public paramer
            ){}
        // Logique de génération de code spécifique à AssignVar
        console.log('Visiting AssignVar');
    }
}

    // Implémentez la méthode de visite spécifique pour SetSpeed
    visitSetSpeed(node: ASTInterfaces.SetSpeed): any {
        // Logique de génération de code spécifique à SetSpeed
        console.log('Visiting SetSpeed');
    }


export class ExpressionVisitor implements ASTInterfaces.ExpressionVisitor {
    // the constructor must take all attribute of the implemented interface
    constructor(public $type: 'Expression') {}
    funs: ASTInterfaces.FunDef[] = []
    accept(visitor: RoboScriptVisitor): any {
        console.log('ExpressionVisitor')
        visitor.visitExpression(this);
        this.funs.forEach(fun => fun.accept(visitor));
    }
}



export class SensorVisitor implements ASTInterfaces.SensorVisitor {
    // the constructor must take all attribute of the implemented interface
    constructor(public $type: 'Sensor') {}
    funs: ASTInterfaces.FunDef[] = []
    accept(visitor: RoboScriptVisitor): any {
        console.log('SensorVisitor')
        visitor.visitSensor(this);
        this.funs.forEach(fun => fun.accept(visitor));
    }
}

export class StatementVisitor implements ASTInterfaces.StatementVisitor {
    // the constructor must take all attribute of the implemented interface
    constructor(public $type: 'Statement') {}
    funs: ASTInterfaces.FunDef[] = []
    accept(visitor: RoboScriptVisitor): any {
        console.log('StatementVisitor')
        visitor.visitStatement(this);
        this.funs.forEach(fun => fun.accept(visitor));
    }
}

export class AnyTypeVisitor implements ASTInterfaces.AnyTypeVisitor {
    // the constructor must take all attribute of the implemented interface
    constructor(public $type: 'AnyType') {}
    funs: ASTInterfaces.FunDef[] = []
    accept(visitor: RoboScriptVisitor): any {
        console.log('AnyTypeVisitor')
        visitor.visitAnyType(this);
        this.funs.forEach(fun => fun.accept(visitor));
    }
}

export class AssignVarVisitor implements ASTInterfaces.AssignVarVisitor {
    // the constructor must take all attribute of the implemented interface
    constructor(public $type: 'AssignVar') {}
    funs: ASTInterfaces.FunDef[] = []
    accept(visitor: RoboScriptVisitor): any {
        console.log('AssignVarVisitor')
        visitor.visitAssignVar(this);
        this.funs.forEach(fun => fun.accept(visitor));
    }
}

export class BinExprVisitor implements ASTInterfaces.BinExprVisitor {
    // the constructor must take all attribute of the implemented interface
    constructor(public $type: 'BinExpr') {}
    funs: ASTInterfaces.FunDef[] = []
    accept(visitor: RoboScriptVisitor): any {
        console.log('BinExprVisitor')
        visitor.visitBinExpr(this);
        this.funs.forEach(fun => fun.accept(visitor));
    }
}

export class BlockVisitor implements ASTInterfaces.BlockVisitor {
    // the constructor must take all attribute of the implemented interface
    constructor(public $type: 'Block') {}
    funs: ASTInterfaces.FunDef[] = []
    accept(visitor: RoboScriptVisitor): any {
        console.log('BlockVisitor')
        visitor.visitBlock(this);
        this.funs.forEach(fun => fun.accept(visitor));
    }
}

export class DistanceVisitor implements ASTInterfaces.DistanceVisitor {
    // the constructor must take all attribute of the implemented interface
    constructor(public $type: 'Distance') {}
    funs: ASTInterfaces.FunDef[] = []
    accept(visitor: RoboScriptVisitor): any {
        console.log('DistanceVisitor')
        visitor.visitDistance(this);
        this.funs.forEach(fun => fun.accept(visitor));
    }
}

export class FunCallVisitor implements ASTInterfaces.FunCallVisitor {
    // the constructor must take all attribute of the implemented interface
    constructor(public $type: 'FunCall') {}
    funs: ASTInterfaces.FunDef[] = []
    accept(visitor: RoboScriptVisitor): any {
        console.log('FunCallVisitor')
        visitor.visitFunCall(this);
        this.funs.forEach(fun => fun.accept(visitor));
    }
}

export class FunDefVisitor implements ASTInterfaces.FunDefVisitor {
    // the constructor must take all attribute of the implemented interface
    constructor(public $type: 'FunDef') {}
    funs: ASTInterfaces.FunDef[] = []
    accept(visitor: RoboScriptVisitor): any {
        console.log('FunDefVisitor')
        visitor.visitFunDef(this);
        this.funs.forEach(fun => fun.accept(visitor));
    }
}

export class GetSpeedVisitor implements ASTInterfaces.GetSpeedVisitor {
    // the constructor must take all attribute of the implemented interface
    constructor(public $type: 'GetSpeed') {}
    funs: ASTInterfaces.FunDef[] = []
    accept(visitor: RoboScriptVisitor): any {
        console.log('GetSpeedVisitor')
        visitor.visitGetSpeed(this);
        this.funs.forEach(fun => fun.accept(visitor));
    }
}

export class IfStmtVisitor implements ASTInterfaces.IfStmtVisitor {
    // the constructor must take all attribute of the implemented interface
    constructor(public $type: 'IfStmt') {}
    funs: ASTInterfaces.FunDef[] = []
    accept(visitor: RoboScriptVisitor): any {
        console.log('IfStmtVisitor')
        visitor.visitIfStmt(this);
        this.funs.forEach(fun => fun.accept(visitor));
    }
}


export class LinearVisitor implements ASTInterfaces.LinearVisitor {
    // the constructor must take all attribute of the implemented interface
    constructor(public $type: 'Linear') {}
    funs: ASTInterfaces.FunDef[] = []
    accept(visitor: RoboScriptVisitor): any {
        console.log('LinearVisitor')
        visitor.visitLinear(this);
        this.funs.forEach(fun => fun.accept(visitor));
    }
}

export class LitVisitor implements ASTInterfaces.LitVisitor {
    // the constructor must take all attribute of the implemented interface
    constructor(public $type: 'Lit') {}
    funs: ASTInterfaces.FunDef[] = []
    accept(visitor: RoboScriptVisitor): any {
        console.log('LitVisitor')
        visitor.visitLit(this);
        this.funs.forEach(fun => fun.accept(visitor));
    }
}

export class RefVisitor implements ASTInterfaces.RefVisitor {
    // the constructor must take all attribute of the implemented interface
    constructor(public $type: 'Ref') {}
    funs: ASTInterfaces.FunDef[] = []
    accept(visitor: RoboScriptVisitor): any {
        console.log('RefVisitor')
        visitor.visitRef(this);
        this.funs.forEach(fun => fun.accept(visitor));
    }
}
export class ReturnStmtVisitor implements ASTInterfaces.ReturnStmtVisitor {
    // the constructor must take all attribute of the implemented interface
    constructor(public $type: 'ReturnStmt') {}
    funs: ASTInterfaces.FunDef[] = []
    accept(visitor: RoboScriptVisitor): any {
        console.log('ReturnStmtVisitor')
        visitor.visitReturnStmt(this);
        this.funs.forEach(fun => fun.accept(visitor));
    }
}

export class RotationVisitor implements ASTInterfaces.RotationVisitor {
    // the constructor must take all attribute of the implemented interface
    constructor(public $type: 'Rotation') {}
    funs: ASTInterfaces.FunDef[] = []
    accept(visitor: RoboScriptVisitor): any {
        console.log('RotationVisitor')
        visitor.visitRotation(this);
        this.funs.forEach(fun => fun.accept(visitor));
    }
}

export class SetSpeedVisitor implements ASTInterfaces.SetSpeedVisitor {
    // the constructor must take all attribute of the implemented interface
    constructor(public $type: 'SetSpeed') {}
    funs: ASTInterfaces.FunDef[] = []
    accept(visitor: RoboScriptVisitor): any {
        console.log('SetSpeedVisitor')
        visitor.visitSetSpeed(this);
        this.funs.forEach(fun => fun.accept(visitor));
    }
}

export class TimeVisitor implements ASTInterfaces.TimeVisitor {
    // the constructor must take all attribute of the implemented interface
    constructor(public $type: 'Time') {}
    funs: ASTInterfaces.FunDef[] = []
    accept(visitor: RoboScriptVisitor): any {
        console.log('TimeVisitor')
        visitor.visitTime(this);
        this.funs.forEach(fun => fun.accept(visitor));
    }
}

export class UnExprVisitor implements ASTInterfaces.UnExprVisitor {
    // the constructor must take all attribute of the implemented interface
    constructor(public $type: 'UnExpr') {}
    funs: ASTInterfaces.FunDef[] = []
    accept(visitor: RoboScriptVisitor): any {
        console.log('UnExprVisitor')
        visitor.visitUnExpr(this);
        this.funs.forEach(fun => fun.accept(visitor));
    }
}

export class VarDeclVisitor implements ASTInterfaces.VarDeclVisitor {
    // the constructor must take all attribute of the implemented interface
    constructor(public $type: 'VarDecl') {}
    funs: ASTInterfaces.FunDef[] = []
    accept(visitor: RoboScriptVisitor): any {
        console.log('VarDeclVisitor')
        visitor.visitVarDecl(this);
        this.funs.forEach(fun => fun.accept(visitor));
    }
}

export class WhileStmtVisitor implements ASTInterfaces.WhileStmtVisitor {
    // the constructor must take all attribute of the implemented interface
    constructor(public $type: 'WhileStmt') {}
    funs: ASTInterfaces.FunDef[] = []
    accept(visitor: RoboScriptVisitor): any {
        console.log('WhileStmtVisitor')
        visitor.visitWhileStmt(this);
        this.funs.forEach(fun => fun.accept(visitor));
    }
}

export class UnitCastVisitor implements ASTInterfaces.UnitCastVisitor {
    // the constructor must take all attribute of the implemented interface
    constructor(public $type: 'UnitCast') {}
    funs: ASTInterfaces.FunDef[] = []
    accept(visitor: RoboScriptVisitor): any {
        console.log('UnitCastVisitor')
        visitor.visitUnitCast(this);
        this.funs.forEach(fun => fun.accept(visitor));
    }
}

export class SpeedVisitor implements ASTInterfaces.SpeedVisitor {
    // the constructor must take all attribute of the implemented interface
    constructor(public $type: 'Speed') {}
    funs: ASTInterfaces.FunDef[] = []
    accept(visitor: RoboScriptVisitor): any {
        console.log('SpeedVisitor')
        visitor.visitSpeed(this);
        this.funs.forEach(fun => fun.accept(visitor));
    }
}