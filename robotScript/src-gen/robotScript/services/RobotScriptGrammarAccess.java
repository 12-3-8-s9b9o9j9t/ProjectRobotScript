/*
 * generated by Xtext 2.32.0
 */
package robotScript.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class RobotScriptGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class EntryPointElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robotScript.RobotScript.EntryPoint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEntryPointAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEntryPointKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cFunctionsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cFunctionsAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cFunctionsFunctionDefParserRuleCall_3_2_0 = (RuleCall)cFunctionsAssignment_3_2.eContents().get(0);
		private final Group cGroup_3_3 = (Group)cGroup_3.eContents().get(3);
		private final Keyword cCommaKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Assignment cFunctionsAssignment_3_3_1 = (Assignment)cGroup_3_3.eContents().get(1);
		private final RuleCall cFunctionsFunctionDefParserRuleCall_3_3_1_0 = (RuleCall)cFunctionsAssignment_3_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//EntryPoint returns EntryPoint:
		//    {EntryPoint}
		//    'EntryPoint'
		//    '{'
		//        ('functions' '{' functions+=FunctionDef ( "," functions+=FunctionDef)* '}' )?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{EntryPoint}
		//'EntryPoint'
		//'{'
		//    ('functions' '{' functions+=FunctionDef ( "," functions+=FunctionDef)* '}' )?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{EntryPoint}
		public Action getEntryPointAction_0() { return cEntryPointAction_0; }
		
		//'EntryPoint'
		public Keyword getEntryPointKeyword_1() { return cEntryPointKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('functions' '{' functions+=FunctionDef ( "," functions+=FunctionDef)* '}' )?
		public Group getGroup_3() { return cGroup_3; }
		
		//'functions'
		public Keyword getFunctionsKeyword_3_0() { return cFunctionsKeyword_3_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_1() { return cLeftCurlyBracketKeyword_3_1; }
		
		//functions+=FunctionDef
		public Assignment getFunctionsAssignment_3_2() { return cFunctionsAssignment_3_2; }
		
		//FunctionDef
		public RuleCall getFunctionsFunctionDefParserRuleCall_3_2_0() { return cFunctionsFunctionDefParserRuleCall_3_2_0; }
		
		//( "," functions+=FunctionDef)*
		public Group getGroup_3_3() { return cGroup_3_3; }
		
		//","
		public Keyword getCommaKeyword_3_3_0() { return cCommaKeyword_3_3_0; }
		
		//functions+=FunctionDef
		public Assignment getFunctionsAssignment_3_3_1() { return cFunctionsAssignment_3_3_1; }
		
		//FunctionDef
		public RuleCall getFunctionsFunctionDefParserRuleCall_3_3_1_0() { return cFunctionsFunctionDefParserRuleCall_3_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_4() { return cRightCurlyBracketKeyword_3_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class AnyTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robotScript.RobotScript.AnyType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVoidTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNumberTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBooleanTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//AnyType returns AnyType:
		//    VoidType | NumberType | BooleanType;
		@Override public ParserRule getRule() { return rule; }
		
		//VoidType | NumberType | BooleanType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//VoidType
		public RuleCall getVoidTypeParserRuleCall_0() { return cVoidTypeParserRuleCall_0; }
		
		//NumberType
		public RuleCall getNumberTypeParserRuleCall_1() { return cNumberTypeParserRuleCall_1; }
		
		//BooleanType
		public RuleCall getBooleanTypeParserRuleCall_2() { return cBooleanTypeParserRuleCall_2; }
	}
	public class CommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robotScript.RobotScript.Command");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVarDeclParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLoopParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIf_ImplParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cIfElseParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cAssignAtDeclParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cReAssignParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cSetSpeedParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cRotationParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cFrontParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cBackParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cRightParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cLeftParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cFunCallParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		
		//Command returns Command:
		//    VarDecl | Loop | If_Impl | IfElse | AssignAtDecl | ReAssign | SetSpeed | Rotation | Front | Back | Right | Left | FunCall;
		@Override public ParserRule getRule() { return rule; }
		
		//VarDecl | Loop | If_Impl | IfElse | AssignAtDecl | ReAssign | SetSpeed | Rotation | Front | Back | Right | Left | FunCall
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//VarDecl
		public RuleCall getVarDeclParserRuleCall_0() { return cVarDeclParserRuleCall_0; }
		
		//Loop
		public RuleCall getLoopParserRuleCall_1() { return cLoopParserRuleCall_1; }
		
		//If_Impl
		public RuleCall getIf_ImplParserRuleCall_2() { return cIf_ImplParserRuleCall_2; }
		
		//IfElse
		public RuleCall getIfElseParserRuleCall_3() { return cIfElseParserRuleCall_3; }
		
		//AssignAtDecl
		public RuleCall getAssignAtDeclParserRuleCall_4() { return cAssignAtDeclParserRuleCall_4; }
		
		//ReAssign
		public RuleCall getReAssignParserRuleCall_5() { return cReAssignParserRuleCall_5; }
		
		//SetSpeed
		public RuleCall getSetSpeedParserRuleCall_6() { return cSetSpeedParserRuleCall_6; }
		
		//Rotation
		public RuleCall getRotationParserRuleCall_7() { return cRotationParserRuleCall_7; }
		
		//Front
		public RuleCall getFrontParserRuleCall_8() { return cFrontParserRuleCall_8; }
		
		//Back
		public RuleCall getBackParserRuleCall_9() { return cBackParserRuleCall_9; }
		
		//Right
		public RuleCall getRightParserRuleCall_10() { return cRightParserRuleCall_10; }
		
		//Left
		public RuleCall getLeftParserRuleCall_11() { return cLeftParserRuleCall_11; }
		
		//FunCall
		public RuleCall getFunCallParserRuleCall_12() { return cFunCallParserRuleCall_12; }
	}
	public class DataTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robotScript.RobotScript.DataType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNumberTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBooleanTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//DataType returns DataType:
		//    NumberType | BooleanType;
		@Override public ParserRule getRule() { return rule; }
		
		//NumberType | BooleanType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NumberType
		public RuleCall getNumberTypeParserRuleCall_0() { return cNumberTypeParserRuleCall_0; }
		
		//BooleanType
		public RuleCall getBooleanTypeParserRuleCall_1() { return cBooleanTypeParserRuleCall_1; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robotScript.RobotScript.Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNegParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNotParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cGreaterParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cAndParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cAddParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cLessParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cOrParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cSubParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cGEqParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cEquParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cMulParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cLEqParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cNEqParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cDivParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cTimeSensorParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		private final RuleCall cDistSensorParserRuleCall_15 = (RuleCall)cAlternatives.eContents().get(15);
		private final RuleCall cBoolLiteralParserRuleCall_16 = (RuleCall)cAlternatives.eContents().get(16);
		private final RuleCall cNumberLiteralParserRuleCall_17 = (RuleCall)cAlternatives.eContents().get(17);
		private final RuleCall cSpeedStateParserRuleCall_18 = (RuleCall)cAlternatives.eContents().get(18);
		private final RuleCall cVariableParserRuleCall_19 = (RuleCall)cAlternatives.eContents().get(19);
		private final RuleCall cFunCallParserRuleCall_20 = (RuleCall)cAlternatives.eContents().get(20);
		
		//Expression returns Expression:
		//    Neg | Not | Greater | And | Add | Less | Or | Sub | GEq | Equ | Mul | LEq | NEq | Div | TimeSensor | DistSensor | BoolLiteral | NumberLiteral | SpeedState | Variable | FunCall;
		@Override public ParserRule getRule() { return rule; }
		
		//Neg | Not | Greater | And | Add | Less | Or | Sub | GEq | Equ | Mul | LEq | NEq | Div | TimeSensor | DistSensor | BoolLiteral | NumberLiteral | SpeedState | Variable | FunCall
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Neg
		public RuleCall getNegParserRuleCall_0() { return cNegParserRuleCall_0; }
		
		//Not
		public RuleCall getNotParserRuleCall_1() { return cNotParserRuleCall_1; }
		
		//Greater
		public RuleCall getGreaterParserRuleCall_2() { return cGreaterParserRuleCall_2; }
		
		//And
		public RuleCall getAndParserRuleCall_3() { return cAndParserRuleCall_3; }
		
		//Add
		public RuleCall getAddParserRuleCall_4() { return cAddParserRuleCall_4; }
		
		//Less
		public RuleCall getLessParserRuleCall_5() { return cLessParserRuleCall_5; }
		
		//Or
		public RuleCall getOrParserRuleCall_6() { return cOrParserRuleCall_6; }
		
		//Sub
		public RuleCall getSubParserRuleCall_7() { return cSubParserRuleCall_7; }
		
		//GEq
		public RuleCall getGEqParserRuleCall_8() { return cGEqParserRuleCall_8; }
		
		//Equ
		public RuleCall getEquParserRuleCall_9() { return cEquParserRuleCall_9; }
		
		//Mul
		public RuleCall getMulParserRuleCall_10() { return cMulParserRuleCall_10; }
		
		//LEq
		public RuleCall getLEqParserRuleCall_11() { return cLEqParserRuleCall_11; }
		
		//NEq
		public RuleCall getNEqParserRuleCall_12() { return cNEqParserRuleCall_12; }
		
		//Div
		public RuleCall getDivParserRuleCall_13() { return cDivParserRuleCall_13; }
		
		//TimeSensor
		public RuleCall getTimeSensorParserRuleCall_14() { return cTimeSensorParserRuleCall_14; }
		
		//DistSensor
		public RuleCall getDistSensorParserRuleCall_15() { return cDistSensorParserRuleCall_15; }
		
		//BoolLiteral
		public RuleCall getBoolLiteralParserRuleCall_16() { return cBoolLiteralParserRuleCall_16; }
		
		//NumberLiteral
		public RuleCall getNumberLiteralParserRuleCall_17() { return cNumberLiteralParserRuleCall_17; }
		
		//SpeedState
		public RuleCall getSpeedStateParserRuleCall_18() { return cSpeedStateParserRuleCall_18; }
		
		//Variable
		public RuleCall getVariableParserRuleCall_19() { return cVariableParserRuleCall_19; }
		
		//FunCall
		public RuleCall getFunCallParserRuleCall_20() { return cFunCallParserRuleCall_20; }
	}
	public class FunctionDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robotScript.RobotScript.FunctionDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFunctionDefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cReturnTypeKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cReturnTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cReturnTypeAnyTypeParserRuleCall_4_0 = (RuleCall)cReturnTypeAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cBodyKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cBodyAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cBodyCommandParserRuleCall_5_2_0 = (RuleCall)cBodyAssignment_5_2.eContents().get(0);
		private final Group cGroup_5_3 = (Group)cGroup_5.eContents().get(3);
		private final Keyword cCommaKeyword_5_3_0 = (Keyword)cGroup_5_3.eContents().get(0);
		private final Assignment cBodyAssignment_5_3_1 = (Assignment)cGroup_5_3.eContents().get(1);
		private final RuleCall cBodyCommandParserRuleCall_5_3_1_0 = (RuleCall)cBodyAssignment_5_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cInputsKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cInputsAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cInputsVarDeclParserRuleCall_6_2_0 = (RuleCall)cInputsAssignment_6_2.eContents().get(0);
		private final Group cGroup_6_3 = (Group)cGroup_6.eContents().get(3);
		private final Keyword cCommaKeyword_6_3_0 = (Keyword)cGroup_6_3.eContents().get(0);
		private final Assignment cInputsAssignment_6_3_1 = (Assignment)cGroup_6_3.eContents().get(1);
		private final RuleCall cInputsVarDeclParserRuleCall_6_3_1_0 = (RuleCall)cInputsAssignment_6_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6_4 = (Keyword)cGroup_6.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//FunctionDef returns FunctionDef:
		//    'FunctionDef'
		//    name=EString
		//    '{'
		//        'returnType' returnType=AnyType
		//        ('body' '{' body+=Command ( "," body+=Command)* '}' )?
		//        ('inputs' '{' inputs+=VarDecl ( "," inputs+=VarDecl)* '}' )?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'FunctionDef'
		//name=EString
		//'{'
		//    'returnType' returnType=AnyType
		//    ('body' '{' body+=Command ( "," body+=Command)* '}' )?
		//    ('inputs' '{' inputs+=VarDecl ( "," inputs+=VarDecl)* '}' )?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'FunctionDef'
		public Keyword getFunctionDefKeyword_0() { return cFunctionDefKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'returnType'
		public Keyword getReturnTypeKeyword_3() { return cReturnTypeKeyword_3; }
		
		//returnType=AnyType
		public Assignment getReturnTypeAssignment_4() { return cReturnTypeAssignment_4; }
		
		//AnyType
		public RuleCall getReturnTypeAnyTypeParserRuleCall_4_0() { return cReturnTypeAnyTypeParserRuleCall_4_0; }
		
		//('body' '{' body+=Command ( "," body+=Command)* '}' )?
		public Group getGroup_5() { return cGroup_5; }
		
		//'body'
		public Keyword getBodyKeyword_5_0() { return cBodyKeyword_5_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5_1() { return cLeftCurlyBracketKeyword_5_1; }
		
		//body+=Command
		public Assignment getBodyAssignment_5_2() { return cBodyAssignment_5_2; }
		
		//Command
		public RuleCall getBodyCommandParserRuleCall_5_2_0() { return cBodyCommandParserRuleCall_5_2_0; }
		
		//( "," body+=Command)*
		public Group getGroup_5_3() { return cGroup_5_3; }
		
		//","
		public Keyword getCommaKeyword_5_3_0() { return cCommaKeyword_5_3_0; }
		
		//body+=Command
		public Assignment getBodyAssignment_5_3_1() { return cBodyAssignment_5_3_1; }
		
		//Command
		public RuleCall getBodyCommandParserRuleCall_5_3_1_0() { return cBodyCommandParserRuleCall_5_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5_4() { return cRightCurlyBracketKeyword_5_4; }
		
		//('inputs' '{' inputs+=VarDecl ( "," inputs+=VarDecl)* '}' )?
		public Group getGroup_6() { return cGroup_6; }
		
		//'inputs'
		public Keyword getInputsKeyword_6_0() { return cInputsKeyword_6_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6_1() { return cLeftCurlyBracketKeyword_6_1; }
		
		//inputs+=VarDecl
		public Assignment getInputsAssignment_6_2() { return cInputsAssignment_6_2; }
		
		//VarDecl
		public RuleCall getInputsVarDeclParserRuleCall_6_2_0() { return cInputsVarDeclParserRuleCall_6_2_0; }
		
		//( "," inputs+=VarDecl)*
		public Group getGroup_6_3() { return cGroup_6_3; }
		
		//","
		public Keyword getCommaKeyword_6_3_0() { return cCommaKeyword_6_3_0; }
		
		//inputs+=VarDecl
		public Assignment getInputsAssignment_6_3_1() { return cInputsAssignment_6_3_1; }
		
		//VarDecl
		public RuleCall getInputsVarDeclParserRuleCall_6_3_1_0() { return cInputsVarDeclParserRuleCall_6_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6_4() { return cRightCurlyBracketKeyword_6_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robotScript.RobotScript.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//    STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class VarDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robotScript.RobotScript.VarDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarDeclKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cTypeKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTypeDataTypeParserRuleCall_4_0 = (RuleCall)cTypeAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//VarDecl returns VarDecl:
		//    'VarDecl'
		//    name=EString
		//    '{'
		//        'type' type=DataType
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'VarDecl'
		//name=EString
		//'{'
		//    'type' type=DataType
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'VarDecl'
		public Keyword getVarDeclKeyword_0() { return cVarDeclKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'type'
		public Keyword getTypeKeyword_3() { return cTypeKeyword_3; }
		
		//type=DataType
		public Assignment getTypeAssignment_4() { return cTypeAssignment_4; }
		
		//DataType
		public RuleCall getTypeDataTypeParserRuleCall_4_0() { return cTypeDataTypeParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class VoidTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robotScript.RobotScript.VoidType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVoidTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cVoidTypeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//VoidType returns VoidType:
		//    {VoidType}
		//    'VoidType'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{VoidType}
		//'VoidType'
		public Group getGroup() { return cGroup; }
		
		//{VoidType}
		public Action getVoidTypeAction_0() { return cVoidTypeAction_0; }
		
		//'VoidType'
		public Keyword getVoidTypeKeyword_1() { return cVoidTypeKeyword_1; }
	}
	public class NumberTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robotScript.RobotScript.NumberType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNumberTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNumberTypeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//NumberType returns NumberType:
		//    {NumberType}
		//    'NumberType'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{NumberType}
		//'NumberType'
		public Group getGroup() { return cGroup; }
		
		//{NumberType}
		public Action getNumberTypeAction_0() { return cNumberTypeAction_0; }
		
		//'NumberType'
		public Keyword getNumberTypeKeyword_1() { return cNumberTypeKeyword_1; }
	}
	public class BooleanTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robotScript.RobotScript.BooleanType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBooleanTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBooleanTypeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//BooleanType returns BooleanType:
		//    {BooleanType}
		//    'BooleanType'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{BooleanType}
		//'BooleanType'
		public Group getGroup() { return cGroup; }
		
		//{BooleanType}
		public Action getBooleanTypeAction_0() { return cBooleanTypeAction_0; }
		
		//'BooleanType'
		public Keyword getBooleanTypeKeyword_1() { return cBooleanTypeKeyword_1; }
	}
	public class LoopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robotScript.RobotScript.Loop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLoopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cBodyKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cBodyAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cBodyCommandParserRuleCall_2_2_0 = (RuleCall)cBodyAssignment_2_2.eContents().get(0);
		private final Group cGroup_2_3 = (Group)cGroup_2.eContents().get(3);
		private final Keyword cCommaKeyword_2_3_0 = (Keyword)cGroup_2_3.eContents().get(0);
		private final Assignment cBodyAssignment_2_3_1 = (Assignment)cGroup_2_3.eContents().get(1);
		private final RuleCall cBodyCommandParserRuleCall_2_3_1_0 = (RuleCall)cBodyAssignment_2_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final Keyword cCondKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cCondAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCondExpressionParserRuleCall_4_0 = (RuleCall)cCondAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Loop returns Loop:
		//    'Loop'
		//    '{'
		//        ('body' '{' body+=Command ( "," body+=Command)* '}' )?
		//        'cond' cond=Expression
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Loop'
		//'{'
		//    ('body' '{' body+=Command ( "," body+=Command)* '}' )?
		//    'cond' cond=Expression
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Loop'
		public Keyword getLoopKeyword_0() { return cLoopKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//('body' '{' body+=Command ( "," body+=Command)* '}' )?
		public Group getGroup_2() { return cGroup_2; }
		
		//'body'
		public Keyword getBodyKeyword_2_0() { return cBodyKeyword_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_1() { return cLeftCurlyBracketKeyword_2_1; }
		
		//body+=Command
		public Assignment getBodyAssignment_2_2() { return cBodyAssignment_2_2; }
		
		//Command
		public RuleCall getBodyCommandParserRuleCall_2_2_0() { return cBodyCommandParserRuleCall_2_2_0; }
		
		//( "," body+=Command)*
		public Group getGroup_2_3() { return cGroup_2_3; }
		
		//","
		public Keyword getCommaKeyword_2_3_0() { return cCommaKeyword_2_3_0; }
		
		//body+=Command
		public Assignment getBodyAssignment_2_3_1() { return cBodyAssignment_2_3_1; }
		
		//Command
		public RuleCall getBodyCommandParserRuleCall_2_3_1_0() { return cBodyCommandParserRuleCall_2_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_4() { return cRightCurlyBracketKeyword_2_4; }
		
		//'cond'
		public Keyword getCondKeyword_3() { return cCondKeyword_3; }
		
		//cond=Expression
		public Assignment getCondAssignment_4() { return cCondAssignment_4; }
		
		//Expression
		public RuleCall getCondExpressionParserRuleCall_4_0() { return cCondExpressionParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class If_ImplElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robotScript.RobotScript.If_Impl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cBodyKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cBodyAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cBodyCommandParserRuleCall_2_2_0 = (RuleCall)cBodyAssignment_2_2.eContents().get(0);
		private final Group cGroup_2_3 = (Group)cGroup_2.eContents().get(3);
		private final Keyword cCommaKeyword_2_3_0 = (Keyword)cGroup_2_3.eContents().get(0);
		private final Assignment cBodyAssignment_2_3_1 = (Assignment)cGroup_2_3.eContents().get(1);
		private final RuleCall cBodyCommandParserRuleCall_2_3_1_0 = (RuleCall)cBodyAssignment_2_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final Keyword cCondKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cCondAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCondExpressionParserRuleCall_4_0 = (RuleCall)cCondAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//If_Impl returns If:
		//    'If'
		//    '{'
		//        ('body' '{' body+=Command ( "," body+=Command)* '}' )?
		//        'cond' cond=Expression
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'If'
		//'{'
		//    ('body' '{' body+=Command ( "," body+=Command)* '}' )?
		//    'cond' cond=Expression
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'If'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//('body' '{' body+=Command ( "," body+=Command)* '}' )?
		public Group getGroup_2() { return cGroup_2; }
		
		//'body'
		public Keyword getBodyKeyword_2_0() { return cBodyKeyword_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_1() { return cLeftCurlyBracketKeyword_2_1; }
		
		//body+=Command
		public Assignment getBodyAssignment_2_2() { return cBodyAssignment_2_2; }
		
		//Command
		public RuleCall getBodyCommandParserRuleCall_2_2_0() { return cBodyCommandParserRuleCall_2_2_0; }
		
		//( "," body+=Command)*
		public Group getGroup_2_3() { return cGroup_2_3; }
		
		//","
		public Keyword getCommaKeyword_2_3_0() { return cCommaKeyword_2_3_0; }
		
		//body+=Command
		public Assignment getBodyAssignment_2_3_1() { return cBodyAssignment_2_3_1; }
		
		//Command
		public RuleCall getBodyCommandParserRuleCall_2_3_1_0() { return cBodyCommandParserRuleCall_2_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_4() { return cRightCurlyBracketKeyword_2_4; }
		
		//'cond'
		public Keyword getCondKeyword_3() { return cCondKeyword_3; }
		
		//cond=Expression
		public Assignment getCondAssignment_4() { return cCondAssignment_4; }
		
		//Expression
		public RuleCall getCondExpressionParserRuleCall_4_0() { return cCondExpressionParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class IfElseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robotScript.RobotScript.IfElse");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfElseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cBodyKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cBodyAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cBodyCommandParserRuleCall_2_2_0 = (RuleCall)cBodyAssignment_2_2.eContents().get(0);
		private final Group cGroup_2_3 = (Group)cGroup_2.eContents().get(3);
		private final Keyword cCommaKeyword_2_3_0 = (Keyword)cGroup_2_3.eContents().get(0);
		private final Assignment cBodyAssignment_2_3_1 = (Assignment)cGroup_2_3.eContents().get(1);
		private final RuleCall cBodyCommandParserRuleCall_2_3_1_0 = (RuleCall)cBodyAssignment_2_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final Keyword cCondKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cCondAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCondExpressionParserRuleCall_4_0 = (RuleCall)cCondAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cBodyElseKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cBodyElseAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cBodyElseCommandParserRuleCall_5_2_0 = (RuleCall)cBodyElseAssignment_5_2.eContents().get(0);
		private final Group cGroup_5_3 = (Group)cGroup_5.eContents().get(3);
		private final Keyword cCommaKeyword_5_3_0 = (Keyword)cGroup_5_3.eContents().get(0);
		private final Assignment cBodyElseAssignment_5_3_1 = (Assignment)cGroup_5_3.eContents().get(1);
		private final RuleCall cBodyElseCommandParserRuleCall_5_3_1_0 = (RuleCall)cBodyElseAssignment_5_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//IfElse returns IfElse:
		//    'IfElse'
		//    '{'
		//        ('body' '{' body+=Command ( "," body+=Command)* '}' )?
		//        'cond' cond=Expression
		//        ('bodyElse' '{' bodyElse+=Command ( "," bodyElse+=Command)* '}' )?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'IfElse'
		//'{'
		//    ('body' '{' body+=Command ( "," body+=Command)* '}' )?
		//    'cond' cond=Expression
		//    ('bodyElse' '{' bodyElse+=Command ( "," bodyElse+=Command)* '}' )?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'IfElse'
		public Keyword getIfElseKeyword_0() { return cIfElseKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//('body' '{' body+=Command ( "," body+=Command)* '}' )?
		public Group getGroup_2() { return cGroup_2; }
		
		//'body'
		public Keyword getBodyKeyword_2_0() { return cBodyKeyword_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_1() { return cLeftCurlyBracketKeyword_2_1; }
		
		//body+=Command
		public Assignment getBodyAssignment_2_2() { return cBodyAssignment_2_2; }
		
		//Command
		public RuleCall getBodyCommandParserRuleCall_2_2_0() { return cBodyCommandParserRuleCall_2_2_0; }
		
		//( "," body+=Command)*
		public Group getGroup_2_3() { return cGroup_2_3; }
		
		//","
		public Keyword getCommaKeyword_2_3_0() { return cCommaKeyword_2_3_0; }
		
		//body+=Command
		public Assignment getBodyAssignment_2_3_1() { return cBodyAssignment_2_3_1; }
		
		//Command
		public RuleCall getBodyCommandParserRuleCall_2_3_1_0() { return cBodyCommandParserRuleCall_2_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_4() { return cRightCurlyBracketKeyword_2_4; }
		
		//'cond'
		public Keyword getCondKeyword_3() { return cCondKeyword_3; }
		
		//cond=Expression
		public Assignment getCondAssignment_4() { return cCondAssignment_4; }
		
		//Expression
		public RuleCall getCondExpressionParserRuleCall_4_0() { return cCondExpressionParserRuleCall_4_0; }
		
		//('bodyElse' '{' bodyElse+=Command ( "," bodyElse+=Command)* '}' )?
		public Group getGroup_5() { return cGroup_5; }
		
		//'bodyElse'
		public Keyword getBodyElseKeyword_5_0() { return cBodyElseKeyword_5_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5_1() { return cLeftCurlyBracketKeyword_5_1; }
		
		//bodyElse+=Command
		public Assignment getBodyElseAssignment_5_2() { return cBodyElseAssignment_5_2; }
		
		//Command
		public RuleCall getBodyElseCommandParserRuleCall_5_2_0() { return cBodyElseCommandParserRuleCall_5_2_0; }
		
		//( "," bodyElse+=Command)*
		public Group getGroup_5_3() { return cGroup_5_3; }
		
		//","
		public Keyword getCommaKeyword_5_3_0() { return cCommaKeyword_5_3_0; }
		
		//bodyElse+=Command
		public Assignment getBodyElseAssignment_5_3_1() { return cBodyElseAssignment_5_3_1; }
		
		//Command
		public RuleCall getBodyElseCommandParserRuleCall_5_3_1_0() { return cBodyElseCommandParserRuleCall_5_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5_4() { return cRightCurlyBracketKeyword_5_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class AssignAtDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robotScript.RobotScript.AssignAtDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAssignAtDeclKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cExpressionKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionExpressionParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		private final Keyword cVardeclKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cVardeclAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cVardeclVarDeclParserRuleCall_5_0 = (RuleCall)cVardeclAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//AssignAtDecl returns AssignAtDecl:
		//    'AssignAtDecl'
		//    '{'
		//        'expression' expression=Expression
		//        'vardecl' vardecl=VarDecl
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'AssignAtDecl'
		//'{'
		//    'expression' expression=Expression
		//    'vardecl' vardecl=VarDecl
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'AssignAtDecl'
		public Keyword getAssignAtDeclKeyword_0() { return cAssignAtDeclKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'expression'
		public Keyword getExpressionKeyword_2() { return cExpressionKeyword_2; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_3_0() { return cExpressionExpressionParserRuleCall_3_0; }
		
		//'vardecl'
		public Keyword getVardeclKeyword_4() { return cVardeclKeyword_4; }
		
		//vardecl=VarDecl
		public Assignment getVardeclAssignment_5() { return cVardeclAssignment_5; }
		
		//VarDecl
		public RuleCall getVardeclVarDeclParserRuleCall_5_0() { return cVardeclVarDeclParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class ReAssignElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robotScript.RobotScript.ReAssign");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReAssignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cVarKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cVarAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cVarVarDeclCrossReference_3_0 = (CrossReference)cVarAssignment_3.eContents().get(0);
		private final RuleCall cVarVarDeclEStringParserRuleCall_3_0_1 = (RuleCall)cVarVarDeclCrossReference_3_0.eContents().get(1);
		private final Keyword cExpressionKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cExpressionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cExpressionExpressionParserRuleCall_5_0 = (RuleCall)cExpressionAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//ReAssign returns ReAssign:
		//    'ReAssign'
		//    '{'
		//        'var' var=[VarDecl|EString]
		//        'expression' expression=Expression
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'ReAssign'
		//'{'
		//    'var' var=[VarDecl|EString]
		//    'expression' expression=Expression
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'ReAssign'
		public Keyword getReAssignKeyword_0() { return cReAssignKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'var'
		public Keyword getVarKeyword_2() { return cVarKeyword_2; }
		
		//var=[VarDecl|EString]
		public Assignment getVarAssignment_3() { return cVarAssignment_3; }
		
		//[VarDecl|EString]
		public CrossReference getVarVarDeclCrossReference_3_0() { return cVarVarDeclCrossReference_3_0; }
		
		//EString
		public RuleCall getVarVarDeclEStringParserRuleCall_3_0_1() { return cVarVarDeclEStringParserRuleCall_3_0_1; }
		
		//'expression'
		public Keyword getExpressionKeyword_4() { return cExpressionKeyword_4; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_5() { return cExpressionAssignment_5; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_5_0() { return cExpressionExpressionParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class SetSpeedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robotScript.RobotScript.SetSpeed");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSetSpeedKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cUnitKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cUnitAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cUnitUnitEnumRuleCall_2_1_0 = (RuleCall)cUnitAssignment_2_1.eContents().get(0);
		private final Keyword cSpeedstateKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSpeedstateAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cSpeedstateSpeedStateCrossReference_4_0 = (CrossReference)cSpeedstateAssignment_4.eContents().get(0);
		private final RuleCall cSpeedstateSpeedStateEStringParserRuleCall_4_0_1 = (RuleCall)cSpeedstateSpeedStateCrossReference_4_0.eContents().get(1);
		private final Keyword cExpressionKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cExpressionAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cExpressionExpressionParserRuleCall_6_0 = (RuleCall)cExpressionAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//SetSpeed returns SetSpeed:
		//    'SetSpeed'
		//    '{'
		//        ('unit' unit=Unit)?
		//        'speedstate' speedstate=[SpeedState|EString]
		//        'expression' expression=Expression
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'SetSpeed'
		//'{'
		//    ('unit' unit=Unit)?
		//    'speedstate' speedstate=[SpeedState|EString]
		//    'expression' expression=Expression
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'SetSpeed'
		public Keyword getSetSpeedKeyword_0() { return cSetSpeedKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//('unit' unit=Unit)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'unit'
		public Keyword getUnitKeyword_2_0() { return cUnitKeyword_2_0; }
		
		//unit=Unit
		public Assignment getUnitAssignment_2_1() { return cUnitAssignment_2_1; }
		
		//Unit
		public RuleCall getUnitUnitEnumRuleCall_2_1_0() { return cUnitUnitEnumRuleCall_2_1_0; }
		
		//'speedstate'
		public Keyword getSpeedstateKeyword_3() { return cSpeedstateKeyword_3; }
		
		//speedstate=[SpeedState|EString]
		public Assignment getSpeedstateAssignment_4() { return cSpeedstateAssignment_4; }
		
		//[SpeedState|EString]
		public CrossReference getSpeedstateSpeedStateCrossReference_4_0() { return cSpeedstateSpeedStateCrossReference_4_0; }
		
		//EString
		public RuleCall getSpeedstateSpeedStateEStringParserRuleCall_4_0_1() { return cSpeedstateSpeedStateEStringParserRuleCall_4_0_1; }
		
		//'expression'
		public Keyword getExpressionKeyword_5() { return cExpressionKeyword_5; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_6() { return cExpressionAssignment_6; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_6_0() { return cExpressionExpressionParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class RotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robotScript.RobotScript.Rotation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRotationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cExpressionKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionExpressionParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Rotation returns Rotation:
		//    'Rotation'
		//    '{'
		//        'expression' expression=Expression
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Rotation'
		//'{'
		//    'expression' expression=Expression
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Rotation'
		public Keyword getRotationKeyword_0() { return cRotationKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'expression'
		public Keyword getExpressionKeyword_2() { return cExpressionKeyword_2; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_3_0() { return cExpressionExpressionParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class FrontElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robotScript.RobotScript.Front");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFrontKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cUnitKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cUnitAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cUnitUnitEnumRuleCall_2_1_0 = (RuleCall)cUnitAssignment_2_1.eContents().get(0);
		private final Keyword cExpressionKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExpressionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExpressionExpressionParserRuleCall_4_0 = (RuleCall)cExpressionAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Front returns Front:
		//    'Front'
		//    '{'
		//        ('unit' unit=Unit)?
		//        'expression' expression=Expression
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Front'
		//'{'
		//    ('unit' unit=Unit)?
		//    'expression' expression=Expression
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Front'
		public Keyword getFrontKeyword_0() { return cFrontKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//('unit' unit=Unit)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'unit'
		public Keyword getUnitKeyword_2_0() { return cUnitKeyword_2_0; }
		
		//unit=Unit
		public Assignment getUnitAssignment_2_1() { return cUnitAssignment_2_1; }
		
		//Unit
		public RuleCall getUnitUnitEnumRuleCall_2_1_0() { return cUnitUnitEnumRuleCall_2_1_0; }
		
		//'expression'
		public Keyword getExpressionKeyword_3() { return cExpressionKeyword_3; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_4() { return cExpressionAssignment_4; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_4_0() { return cExpressionExpressionParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class BackElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robotScript.RobotScript.Back");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBackKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cUnitKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cUnitAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cUnitUnitEnumRuleCall_2_1_0 = (RuleCall)cUnitAssignment_2_1.eContents().get(0);
		private final Keyword cExpressionKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExpressionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExpressionExpressionParserRuleCall_4_0 = (RuleCall)cExpressionAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Back returns Back:
		//    'Back'
		//    '{'
		//        ('unit' unit=Unit)?
		//        'expression' expression=Expression
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Back'
		//'{'
		//    ('unit' unit=Unit)?
		//    'expression' expression=Expression
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Back'
		public Keyword getBackKeyword_0() { return cBackKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//('unit' unit=Unit)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'unit'
		public Keyword getUnitKeyword_2_0() { return cUnitKeyword_2_0; }
		
		//unit=Unit
		public Assignment getUnitAssignment_2_1() { return cUnitAssignment_2_1; }
		
		//Unit
		public RuleCall getUnitUnitEnumRuleCall_2_1_0() { return cUnitUnitEnumRuleCall_2_1_0; }
		
		//'expression'
		public Keyword getExpressionKeyword_3() { return cExpressionKeyword_3; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_4() { return cExpressionAssignment_4; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_4_0() { return cExpressionExpressionParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class RightElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robotScript.RobotScript.Right");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRightKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cUnitKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cUnitAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cUnitUnitEnumRuleCall_2_1_0 = (RuleCall)cUnitAssignment_2_1.eContents().get(0);
		private final Keyword cExpressionKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExpressionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExpressionExpressionParserRuleCall_4_0 = (RuleCall)cExpressionAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Right returns Right:
		//    'Right'
		//    '{'
		//        ('unit' unit=Unit)?
		//        'expression' expression=Expression
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Right'
		//'{'
		//    ('unit' unit=Unit)?
		//    'expression' expression=Expression
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Right'
		public Keyword getRightKeyword_0() { return cRightKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//('unit' unit=Unit)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'unit'
		public Keyword getUnitKeyword_2_0() { return cUnitKeyword_2_0; }
		
		//unit=Unit
		public Assignment getUnitAssignment_2_1() { return cUnitAssignment_2_1; }
		
		//Unit
		public RuleCall getUnitUnitEnumRuleCall_2_1_0() { return cUnitUnitEnumRuleCall_2_1_0; }
		
		//'expression'
		public Keyword getExpressionKeyword_3() { return cExpressionKeyword_3; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_4() { return cExpressionAssignment_4; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_4_0() { return cExpressionExpressionParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class LeftElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robotScript.RobotScript.Left");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cUnitKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cUnitAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cUnitUnitEnumRuleCall_2_1_0 = (RuleCall)cUnitAssignment_2_1.eContents().get(0);
		private final Keyword cExpressionKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExpressionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExpressionExpressionParserRuleCall_4_0 = (RuleCall)cExpressionAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Left returns Left:
		//    'Left'
		//    '{'
		//        ('unit' unit=Unit)?
		//        'expression' expression=Expression
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Left'
		//'{'
		//    ('unit' unit=Unit)?
		//    'expression' expression=Expression
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Left'
		public Keyword getLeftKeyword_0() { return cLeftKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//('unit' unit=Unit)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'unit'
		public Keyword getUnitKeyword_2_0() { return cUnitKeyword_2_0; }
		
		//unit=Unit
		public Assignment getUnitAssignment_2_1() { return cUnitAssignment_2_1; }
		
		//Unit
		public RuleCall getUnitUnitEnumRuleCall_2_1_0() { return cUnitUnitEnumRuleCall_2_1_0; }
		
		//'expression'
		public Keyword getExpressionKeyword_3() { return cExpressionKeyword_3; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_4() { return cExpressionAssignment_4; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_4_0() { return cExpressionExpressionParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class FunCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robotScript.RobotScript.FunCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFunCallKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cFunKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFunAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cFunFunctionDefCrossReference_3_0 = (CrossReference)cFunAssignment_3.eContents().get(0);
		private final RuleCall cFunFunctionDefEStringParserRuleCall_3_0_1 = (RuleCall)cFunFunctionDefCrossReference_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cInputsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cInputsAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cInputsExpressionParserRuleCall_4_2_0 = (RuleCall)cInputsAssignment_4_2.eContents().get(0);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cCommaKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cInputsAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final RuleCall cInputsExpressionParserRuleCall_4_3_1_0 = (RuleCall)cInputsAssignment_4_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//FunCall returns FunCall:
		//    'FunCall'
		//    '{'
		//        'fun' fun=[FunctionDef|EString]
		//        ('inputs' '{' inputs+=Expression ( "," inputs+=Expression)* '}' )?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'FunCall'
		//'{'
		//    'fun' fun=[FunctionDef|EString]
		//    ('inputs' '{' inputs+=Expression ( "," inputs+=Expression)* '}' )?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'FunCall'
		public Keyword getFunCallKeyword_0() { return cFunCallKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'fun'
		public Keyword getFunKeyword_2() { return cFunKeyword_2; }
		
		//fun=[FunctionDef|EString]
		public Assignment getFunAssignment_3() { return cFunAssignment_3; }
		
		//[FunctionDef|EString]
		public CrossReference getFunFunctionDefCrossReference_3_0() { return cFunFunctionDefCrossReference_3_0; }
		
		//EString
		public RuleCall getFunFunctionDefEStringParserRuleCall_3_0_1() { return cFunFunctionDefEStringParserRuleCall_3_0_1; }
		
		//('inputs' '{' inputs+=Expression ( "," inputs+=Expression)* '}' )?
		public Group getGroup_4() { return cGroup_4; }
		
		//'inputs'
		public Keyword getInputsKeyword_4_0() { return cInputsKeyword_4_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_1() { return cLeftCurlyBracketKeyword_4_1; }
		
		//inputs+=Expression
		public Assignment getInputsAssignment_4_2() { return cInputsAssignment_4_2; }
		
		//Expression
		public RuleCall getInputsExpressionParserRuleCall_4_2_0() { return cInputsExpressionParserRuleCall_4_2_0; }
		
		//( "," inputs+=Expression)*
		public Group getGroup_4_3() { return cGroup_4_3; }
		
		//","
		public Keyword getCommaKeyword_4_3_0() { return cCommaKeyword_4_3_0; }
		
		//inputs+=Expression
		public Assignment getInputsAssignment_4_3_1() { return cInputsAssignment_4_3_1; }
		
		//Expression
		public RuleCall getInputsExpressionParserRuleCall_4_3_1_0() { return cInputsExpressionParserRuleCall_4_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_4() { return cRightCurlyBracketKeyword_4_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class NegElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robotScript.RobotScript.Neg");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNegKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cOpKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOpAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOpExpressionParserRuleCall_3_0 = (RuleCall)cOpAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Neg returns Neg:
		//    'Neg'
		//    '{'
		//        'op' op=Expression
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Neg'
		//'{'
		//    'op' op=Expression
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Neg'
		public Keyword getNegKeyword_0() { return cNegKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'op'
		public Keyword getOpKeyword_2() { return cOpKeyword_2; }
		
		//op=Expression
		public Assignment getOpAssignment_3() { return cOpAssignment_3; }
		
		//Expression
		public RuleCall getOpExpressionParserRuleCall_3_0() { return cOpExpressionParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class NotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robotScript.RobotScript.Not");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNotKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cOpKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOpAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOpExpressionParserRuleCall_3_0 = (RuleCall)cOpAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Not returns Not:
		//    'Not'
		//    '{'
		//        'op' op=Expression
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Not'
		//'{'
		//    'op' op=Expression
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Not'
		public Keyword getNotKeyword_0() { return cNotKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'op'
		public Keyword getOpKeyword_2() { return cOpKeyword_2; }
		
		//op=Expression
		public Assignment getOpAssignment_3() { return cOpAssignment_3; }
		
		//Expression
		public RuleCall getOpExpressionParserRuleCall_3_0() { return cOpExpressionParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class GreaterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robotScript.RobotScript.Greater");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGreaterKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cRightOpKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRightOpAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightOpExpressionParserRuleCall_3_0 = (RuleCall)cRightOpAssignment_3.eContents().get(0);
		private final Keyword cLeftOpKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cLeftOpAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cLeftOpExpressionParserRuleCall_5_0 = (RuleCall)cLeftOpAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Greater returns Greater:
		//    'Greater'
		//    '{'
		//        'rightOp' rightOp=Expression
		//        'leftOp' leftOp=Expression
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Greater'
		//'{'
		//    'rightOp' rightOp=Expression
		//    'leftOp' leftOp=Expression
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Greater'
		public Keyword getGreaterKeyword_0() { return cGreaterKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'rightOp'
		public Keyword getRightOpKeyword_2() { return cRightOpKeyword_2; }
		
		//rightOp=Expression
		public Assignment getRightOpAssignment_3() { return cRightOpAssignment_3; }
		
		//Expression
		public RuleCall getRightOpExpressionParserRuleCall_3_0() { return cRightOpExpressionParserRuleCall_3_0; }
		
		//'leftOp'
		public Keyword getLeftOpKeyword_4() { return cLeftOpKeyword_4; }
		
		//leftOp=Expression
		public Assignment getLeftOpAssignment_5() { return cLeftOpAssignment_5; }
		
		//Expression
		public RuleCall getLeftOpExpressionParserRuleCall_5_0() { return cLeftOpExpressionParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class AndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robotScript.RobotScript.And");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAndKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cRightOpKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRightOpAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightOpExpressionParserRuleCall_3_0 = (RuleCall)cRightOpAssignment_3.eContents().get(0);
		private final Keyword cLeftOpKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cLeftOpAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cLeftOpExpressionParserRuleCall_5_0 = (RuleCall)cLeftOpAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//And returns And:
		//    'And'
		//    '{'
		//        'rightOp' rightOp=Expression
		//        'leftOp' leftOp=Expression
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'And'
		//'{'
		//    'rightOp' rightOp=Expression
		//    'leftOp' leftOp=Expression
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'And'
		public Keyword getAndKeyword_0() { return cAndKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'rightOp'
		public Keyword getRightOpKeyword_2() { return cRightOpKeyword_2; }
		
		//rightOp=Expression
		public Assignment getRightOpAssignment_3() { return cRightOpAssignment_3; }
		
		//Expression
		public RuleCall getRightOpExpressionParserRuleCall_3_0() { return cRightOpExpressionParserRuleCall_3_0; }
		
		//'leftOp'
		public Keyword getLeftOpKeyword_4() { return cLeftOpKeyword_4; }
		
		//leftOp=Expression
		public Assignment getLeftOpAssignment_5() { return cLeftOpAssignment_5; }
		
		//Expression
		public RuleCall getLeftOpExpressionParserRuleCall_5_0() { return cLeftOpExpressionParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class AddElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robotScript.RobotScript.Add");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAddKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cRightOpKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRightOpAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightOpExpressionParserRuleCall_3_0 = (RuleCall)cRightOpAssignment_3.eContents().get(0);
		private final Keyword cLeftOpKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cLeftOpAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cLeftOpExpressionParserRuleCall_5_0 = (RuleCall)cLeftOpAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Add returns Add:
		//    'Add'
		//    '{'
		//        'rightOp' rightOp=Expression
		//        'leftOp' leftOp=Expression
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Add'
		//'{'
		//    'rightOp' rightOp=Expression
		//    'leftOp' leftOp=Expression
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Add'
		public Keyword getAddKeyword_0() { return cAddKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'rightOp'
		public Keyword getRightOpKeyword_2() { return cRightOpKeyword_2; }
		
		//rightOp=Expression
		public Assignment getRightOpAssignment_3() { return cRightOpAssignment_3; }
		
		//Expression
		public RuleCall getRightOpExpressionParserRuleCall_3_0() { return cRightOpExpressionParserRuleCall_3_0; }
		
		//'leftOp'
		public Keyword getLeftOpKeyword_4() { return cLeftOpKeyword_4; }
		
		//leftOp=Expression
		public Assignment getLeftOpAssignment_5() { return cLeftOpAssignment_5; }
		
		//Expression
		public RuleCall getLeftOpExpressionParserRuleCall_5_0() { return cLeftOpExpressionParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class LessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robotScript.RobotScript.Less");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLessKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cRightOpKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRightOpAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightOpExpressionParserRuleCall_3_0 = (RuleCall)cRightOpAssignment_3.eContents().get(0);
		private final Keyword cLeftOpKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cLeftOpAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cLeftOpExpressionParserRuleCall_5_0 = (RuleCall)cLeftOpAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Less returns Less:
		//    'Less'
		//    '{'
		//        'rightOp' rightOp=Expression
		//        'leftOp' leftOp=Expression
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Less'
		//'{'
		//    'rightOp' rightOp=Expression
		//    'leftOp' leftOp=Expression
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Less'
		public Keyword getLessKeyword_0() { return cLessKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'rightOp'
		public Keyword getRightOpKeyword_2() { return cRightOpKeyword_2; }
		
		//rightOp=Expression
		public Assignment getRightOpAssignment_3() { return cRightOpAssignment_3; }
		
		//Expression
		public RuleCall getRightOpExpressionParserRuleCall_3_0() { return cRightOpExpressionParserRuleCall_3_0; }
		
		//'leftOp'
		public Keyword getLeftOpKeyword_4() { return cLeftOpKeyword_4; }
		
		//leftOp=Expression
		public Assignment getLeftOpAssignment_5() { return cLeftOpAssignment_5; }
		
		//Expression
		public RuleCall getLeftOpExpressionParserRuleCall_5_0() { return cLeftOpExpressionParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class OrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robotScript.RobotScript.Or");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOrKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cRightOpKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRightOpAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightOpExpressionParserRuleCall_3_0 = (RuleCall)cRightOpAssignment_3.eContents().get(0);
		private final Keyword cLeftOpKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cLeftOpAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cLeftOpExpressionParserRuleCall_5_0 = (RuleCall)cLeftOpAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Or returns Or:
		//    'Or'
		//    '{'
		//        'rightOp' rightOp=Expression
		//        'leftOp' leftOp=Expression
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Or'
		//'{'
		//    'rightOp' rightOp=Expression
		//    'leftOp' leftOp=Expression
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Or'
		public Keyword getOrKeyword_0() { return cOrKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'rightOp'
		public Keyword getRightOpKeyword_2() { return cRightOpKeyword_2; }
		
		//rightOp=Expression
		public Assignment getRightOpAssignment_3() { return cRightOpAssignment_3; }
		
		//Expression
		public RuleCall getRightOpExpressionParserRuleCall_3_0() { return cRightOpExpressionParserRuleCall_3_0; }
		
		//'leftOp'
		public Keyword getLeftOpKeyword_4() { return cLeftOpKeyword_4; }
		
		//leftOp=Expression
		public Assignment getLeftOpAssignment_5() { return cLeftOpAssignment_5; }
		
		//Expression
		public RuleCall getLeftOpExpressionParserRuleCall_5_0() { return cLeftOpExpressionParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class SubElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robotScript.RobotScript.Sub");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSubKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cRightOpKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRightOpAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightOpExpressionParserRuleCall_3_0 = (RuleCall)cRightOpAssignment_3.eContents().get(0);
		private final Keyword cLeftOpKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cLeftOpAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cLeftOpExpressionParserRuleCall_5_0 = (RuleCall)cLeftOpAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Sub returns Sub:
		//    'Sub'
		//    '{'
		//        'rightOp' rightOp=Expression
		//        'leftOp' leftOp=Expression
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Sub'
		//'{'
		//    'rightOp' rightOp=Expression
		//    'leftOp' leftOp=Expression
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Sub'
		public Keyword getSubKeyword_0() { return cSubKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'rightOp'
		public Keyword getRightOpKeyword_2() { return cRightOpKeyword_2; }
		
		//rightOp=Expression
		public Assignment getRightOpAssignment_3() { return cRightOpAssignment_3; }
		
		//Expression
		public RuleCall getRightOpExpressionParserRuleCall_3_0() { return cRightOpExpressionParserRuleCall_3_0; }
		
		//'leftOp'
		public Keyword getLeftOpKeyword_4() { return cLeftOpKeyword_4; }
		
		//leftOp=Expression
		public Assignment getLeftOpAssignment_5() { return cLeftOpAssignment_5; }
		
		//Expression
		public RuleCall getLeftOpExpressionParserRuleCall_5_0() { return cLeftOpExpressionParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class GEqElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robotScript.RobotScript.GEq");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGEqKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cRightOpKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRightOpAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightOpExpressionParserRuleCall_3_0 = (RuleCall)cRightOpAssignment_3.eContents().get(0);
		private final Keyword cLeftOpKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cLeftOpAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cLeftOpExpressionParserRuleCall_5_0 = (RuleCall)cLeftOpAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//GEq returns GEq:
		//    'GEq'
		//    '{'
		//        'rightOp' rightOp=Expression
		//        'leftOp' leftOp=Expression
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'GEq'
		//'{'
		//    'rightOp' rightOp=Expression
		//    'leftOp' leftOp=Expression
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'GEq'
		public Keyword getGEqKeyword_0() { return cGEqKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'rightOp'
		public Keyword getRightOpKeyword_2() { return cRightOpKeyword_2; }
		
		//rightOp=Expression
		public Assignment getRightOpAssignment_3() { return cRightOpAssignment_3; }
		
		//Expression
		public RuleCall getRightOpExpressionParserRuleCall_3_0() { return cRightOpExpressionParserRuleCall_3_0; }
		
		//'leftOp'
		public Keyword getLeftOpKeyword_4() { return cLeftOpKeyword_4; }
		
		//leftOp=Expression
		public Assignment getLeftOpAssignment_5() { return cLeftOpAssignment_5; }
		
		//Expression
		public RuleCall getLeftOpExpressionParserRuleCall_5_0() { return cLeftOpExpressionParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class EquElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robotScript.RobotScript.Equ");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEquKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cRightOpKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRightOpAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightOpExpressionParserRuleCall_3_0 = (RuleCall)cRightOpAssignment_3.eContents().get(0);
		private final Keyword cLeftOpKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cLeftOpAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cLeftOpExpressionParserRuleCall_5_0 = (RuleCall)cLeftOpAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Equ returns Equ:
		//    'Equ'
		//    '{'
		//        'rightOp' rightOp=Expression
		//        'leftOp' leftOp=Expression
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Equ'
		//'{'
		//    'rightOp' rightOp=Expression
		//    'leftOp' leftOp=Expression
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Equ'
		public Keyword getEquKeyword_0() { return cEquKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'rightOp'
		public Keyword getRightOpKeyword_2() { return cRightOpKeyword_2; }
		
		//rightOp=Expression
		public Assignment getRightOpAssignment_3() { return cRightOpAssignment_3; }
		
		//Expression
		public RuleCall getRightOpExpressionParserRuleCall_3_0() { return cRightOpExpressionParserRuleCall_3_0; }
		
		//'leftOp'
		public Keyword getLeftOpKeyword_4() { return cLeftOpKeyword_4; }
		
		//leftOp=Expression
		public Assignment getLeftOpAssignment_5() { return cLeftOpAssignment_5; }
		
		//Expression
		public RuleCall getLeftOpExpressionParserRuleCall_5_0() { return cLeftOpExpressionParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class MulElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robotScript.RobotScript.Mul");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMulKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cRightOpKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRightOpAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightOpExpressionParserRuleCall_3_0 = (RuleCall)cRightOpAssignment_3.eContents().get(0);
		private final Keyword cLeftOpKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cLeftOpAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cLeftOpExpressionParserRuleCall_5_0 = (RuleCall)cLeftOpAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Mul returns Mul:
		//    'Mul'
		//    '{'
		//        'rightOp' rightOp=Expression
		//        'leftOp' leftOp=Expression
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Mul'
		//'{'
		//    'rightOp' rightOp=Expression
		//    'leftOp' leftOp=Expression
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Mul'
		public Keyword getMulKeyword_0() { return cMulKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'rightOp'
		public Keyword getRightOpKeyword_2() { return cRightOpKeyword_2; }
		
		//rightOp=Expression
		public Assignment getRightOpAssignment_3() { return cRightOpAssignment_3; }
		
		//Expression
		public RuleCall getRightOpExpressionParserRuleCall_3_0() { return cRightOpExpressionParserRuleCall_3_0; }
		
		//'leftOp'
		public Keyword getLeftOpKeyword_4() { return cLeftOpKeyword_4; }
		
		//leftOp=Expression
		public Assignment getLeftOpAssignment_5() { return cLeftOpAssignment_5; }
		
		//Expression
		public RuleCall getLeftOpExpressionParserRuleCall_5_0() { return cLeftOpExpressionParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class LEqElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robotScript.RobotScript.LEq");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLEqKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cRightOpKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRightOpAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightOpExpressionParserRuleCall_3_0 = (RuleCall)cRightOpAssignment_3.eContents().get(0);
		private final Keyword cLeftOpKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cLeftOpAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cLeftOpExpressionParserRuleCall_5_0 = (RuleCall)cLeftOpAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//LEq returns LEq:
		//    'LEq'
		//    '{'
		//        'rightOp' rightOp=Expression
		//        'leftOp' leftOp=Expression
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'LEq'
		//'{'
		//    'rightOp' rightOp=Expression
		//    'leftOp' leftOp=Expression
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'LEq'
		public Keyword getLEqKeyword_0() { return cLEqKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'rightOp'
		public Keyword getRightOpKeyword_2() { return cRightOpKeyword_2; }
		
		//rightOp=Expression
		public Assignment getRightOpAssignment_3() { return cRightOpAssignment_3; }
		
		//Expression
		public RuleCall getRightOpExpressionParserRuleCall_3_0() { return cRightOpExpressionParserRuleCall_3_0; }
		
		//'leftOp'
		public Keyword getLeftOpKeyword_4() { return cLeftOpKeyword_4; }
		
		//leftOp=Expression
		public Assignment getLeftOpAssignment_5() { return cLeftOpAssignment_5; }
		
		//Expression
		public RuleCall getLeftOpExpressionParserRuleCall_5_0() { return cLeftOpExpressionParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class NEqElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robotScript.RobotScript.NEq");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNEqKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cRightOpKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRightOpAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightOpExpressionParserRuleCall_3_0 = (RuleCall)cRightOpAssignment_3.eContents().get(0);
		private final Keyword cLeftOpKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cLeftOpAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cLeftOpExpressionParserRuleCall_5_0 = (RuleCall)cLeftOpAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//NEq returns NEq:
		//    'NEq'
		//    '{'
		//        'rightOp' rightOp=Expression
		//        'leftOp' leftOp=Expression
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'NEq'
		//'{'
		//    'rightOp' rightOp=Expression
		//    'leftOp' leftOp=Expression
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'NEq'
		public Keyword getNEqKeyword_0() { return cNEqKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'rightOp'
		public Keyword getRightOpKeyword_2() { return cRightOpKeyword_2; }
		
		//rightOp=Expression
		public Assignment getRightOpAssignment_3() { return cRightOpAssignment_3; }
		
		//Expression
		public RuleCall getRightOpExpressionParserRuleCall_3_0() { return cRightOpExpressionParserRuleCall_3_0; }
		
		//'leftOp'
		public Keyword getLeftOpKeyword_4() { return cLeftOpKeyword_4; }
		
		//leftOp=Expression
		public Assignment getLeftOpAssignment_5() { return cLeftOpAssignment_5; }
		
		//Expression
		public RuleCall getLeftOpExpressionParserRuleCall_5_0() { return cLeftOpExpressionParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class DivElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robotScript.RobotScript.Div");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDivKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cRightOpKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRightOpAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightOpExpressionParserRuleCall_3_0 = (RuleCall)cRightOpAssignment_3.eContents().get(0);
		private final Keyword cLeftOpKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cLeftOpAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cLeftOpExpressionParserRuleCall_5_0 = (RuleCall)cLeftOpAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Div returns Div:
		//    'Div'
		//    '{'
		//        'rightOp' rightOp=Expression
		//        'leftOp' leftOp=Expression
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Div'
		//'{'
		//    'rightOp' rightOp=Expression
		//    'leftOp' leftOp=Expression
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Div'
		public Keyword getDivKeyword_0() { return cDivKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'rightOp'
		public Keyword getRightOpKeyword_2() { return cRightOpKeyword_2; }
		
		//rightOp=Expression
		public Assignment getRightOpAssignment_3() { return cRightOpAssignment_3; }
		
		//Expression
		public RuleCall getRightOpExpressionParserRuleCall_3_0() { return cRightOpExpressionParserRuleCall_3_0; }
		
		//'leftOp'
		public Keyword getLeftOpKeyword_4() { return cLeftOpKeyword_4; }
		
		//leftOp=Expression
		public Assignment getLeftOpAssignment_5() { return cLeftOpAssignment_5; }
		
		//Expression
		public RuleCall getLeftOpExpressionParserRuleCall_5_0() { return cLeftOpExpressionParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class TimeSensorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robotScript.RobotScript.TimeSensor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTimeSensorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTimeSensorKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//TimeSensor returns TimeSensor:
		//    {TimeSensor}
		//    'TimeSensor'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{TimeSensor}
		//'TimeSensor'
		public Group getGroup() { return cGroup; }
		
		//{TimeSensor}
		public Action getTimeSensorAction_0() { return cTimeSensorAction_0; }
		
		//'TimeSensor'
		public Keyword getTimeSensorKeyword_1() { return cTimeSensorKeyword_1; }
	}
	public class DistSensorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robotScript.RobotScript.DistSensor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDistSensorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDistSensorKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//DistSensor returns DistSensor:
		//    {DistSensor}
		//    'DistSensor'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{DistSensor}
		//'DistSensor'
		public Group getGroup() { return cGroup; }
		
		//{DistSensor}
		public Action getDistSensorAction_0() { return cDistSensorAction_0; }
		
		//'DistSensor'
		public Keyword getDistSensorKeyword_1() { return cDistSensorKeyword_1; }
	}
	public class BoolLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robotScript.RobotScript.BoolLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBoolLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBoolLiteralKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//BoolLiteral returns BoolLiteral:
		//    {BoolLiteral}
		//    'BoolLiteral'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{BoolLiteral}
		//'BoolLiteral'
		public Group getGroup() { return cGroup; }
		
		//{BoolLiteral}
		public Action getBoolLiteralAction_0() { return cBoolLiteralAction_0; }
		
		//'BoolLiteral'
		public Keyword getBoolLiteralKeyword_1() { return cBoolLiteralKeyword_1; }
	}
	public class NumberLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robotScript.RobotScript.NumberLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNumberLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNumberLiteralKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//NumberLiteral returns NumberLiteral:
		//    {NumberLiteral}
		//    'NumberLiteral'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{NumberLiteral}
		//'NumberLiteral'
		public Group getGroup() { return cGroup; }
		
		//{NumberLiteral}
		public Action getNumberLiteralAction_0() { return cNumberLiteralAction_0; }
		
		//'NumberLiteral'
		public Keyword getNumberLiteralKeyword_1() { return cNumberLiteralKeyword_1; }
	}
	public class SpeedStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robotScript.RobotScript.SpeedState");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSpeedStateAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSpeedStateKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//SpeedState returns SpeedState:
		//    {SpeedState}
		//    'SpeedState'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{SpeedState}
		//'SpeedState'
		public Group getGroup() { return cGroup; }
		
		//{SpeedState}
		public Action getSpeedStateAction_0() { return cSpeedStateAction_0; }
		
		//'SpeedState'
		public Keyword getSpeedStateKeyword_1() { return cSpeedStateKeyword_1; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robotScript.RobotScript.Variable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVariableKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cVarKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cVarAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cVarVarDeclCrossReference_3_0 = (CrossReference)cVarAssignment_3.eContents().get(0);
		private final RuleCall cVarVarDeclEStringParserRuleCall_3_0_1 = (RuleCall)cVarVarDeclCrossReference_3_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Variable returns Variable:
		//    'Variable'
		//    '{'
		//        'var' var=[VarDecl|EString]
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Variable'
		//'{'
		//    'var' var=[VarDecl|EString]
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Variable'
		public Keyword getVariableKeyword_0() { return cVariableKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'var'
		public Keyword getVarKeyword_2() { return cVarKeyword_2; }
		
		//var=[VarDecl|EString]
		public Assignment getVarAssignment_3() { return cVarAssignment_3; }
		
		//[VarDecl|EString]
		public CrossReference getVarVarDeclCrossReference_3_0() { return cVarVarDeclCrossReference_3_0; }
		
		//EString
		public RuleCall getVarVarDeclEStringParserRuleCall_3_0_1() { return cVarVarDeclEStringParserRuleCall_3_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	
	public class UnitElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "robotScript.RobotScript.Unit");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cMEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cMMKeyword_0_0 = (Keyword)cMEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDMEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDMDMKeyword_1_0 = (Keyword)cDMEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cCMEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cCMCMKeyword_2_0 = (Keyword)cCMEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cMMEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cMMMMKeyword_3_0 = (Keyword)cMMEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum Unit returns Unit:
		//                M = 'M' | DM = 'DM' | CM = 'CM' | MM = 'MM';
		public EnumRule getRule() { return rule; }
		
		//M = 'M' | DM = 'DM' | CM = 'CM' | MM = 'MM'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//M = 'M'
		public EnumLiteralDeclaration getMEnumLiteralDeclaration_0() { return cMEnumLiteralDeclaration_0; }
		
		//'M'
		public Keyword getMMKeyword_0_0() { return cMMKeyword_0_0; }
		
		//DM = 'DM'
		public EnumLiteralDeclaration getDMEnumLiteralDeclaration_1() { return cDMEnumLiteralDeclaration_1; }
		
		//'DM'
		public Keyword getDMDMKeyword_1_0() { return cDMDMKeyword_1_0; }
		
		//CM = 'CM'
		public EnumLiteralDeclaration getCMEnumLiteralDeclaration_2() { return cCMEnumLiteralDeclaration_2; }
		
		//'CM'
		public Keyword getCMCMKeyword_2_0() { return cCMCMKeyword_2_0; }
		
		//MM = 'MM'
		public EnumLiteralDeclaration getMMEnumLiteralDeclaration_3() { return cMMEnumLiteralDeclaration_3; }
		
		//'MM'
		public Keyword getMMMMKeyword_3_0() { return cMMMMKeyword_3_0; }
	}
	
	private final EntryPointElements pEntryPoint;
	private final AnyTypeElements pAnyType;
	private final CommandElements pCommand;
	private final DataTypeElements pDataType;
	private final ExpressionElements pExpression;
	private final FunctionDefElements pFunctionDef;
	private final EStringElements pEString;
	private final VarDeclElements pVarDecl;
	private final VoidTypeElements pVoidType;
	private final NumberTypeElements pNumberType;
	private final BooleanTypeElements pBooleanType;
	private final LoopElements pLoop;
	private final If_ImplElements pIf_Impl;
	private final IfElseElements pIfElse;
	private final AssignAtDeclElements pAssignAtDecl;
	private final ReAssignElements pReAssign;
	private final SetSpeedElements pSetSpeed;
	private final RotationElements pRotation;
	private final FrontElements pFront;
	private final BackElements pBack;
	private final RightElements pRight;
	private final LeftElements pLeft;
	private final FunCallElements pFunCall;
	private final NegElements pNeg;
	private final NotElements pNot;
	private final GreaterElements pGreater;
	private final AndElements pAnd;
	private final AddElements pAdd;
	private final LessElements pLess;
	private final OrElements pOr;
	private final SubElements pSub;
	private final GEqElements pGEq;
	private final EquElements pEqu;
	private final MulElements pMul;
	private final LEqElements pLEq;
	private final NEqElements pNEq;
	private final DivElements pDiv;
	private final TimeSensorElements pTimeSensor;
	private final DistSensorElements pDistSensor;
	private final BoolLiteralElements pBoolLiteral;
	private final NumberLiteralElements pNumberLiteral;
	private final SpeedStateElements pSpeedState;
	private final VariableElements pVariable;
	private final UnitElements eUnit;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public RobotScriptGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pEntryPoint = new EntryPointElements();
		this.pAnyType = new AnyTypeElements();
		this.pCommand = new CommandElements();
		this.pDataType = new DataTypeElements();
		this.pExpression = new ExpressionElements();
		this.pFunctionDef = new FunctionDefElements();
		this.pEString = new EStringElements();
		this.pVarDecl = new VarDeclElements();
		this.pVoidType = new VoidTypeElements();
		this.pNumberType = new NumberTypeElements();
		this.pBooleanType = new BooleanTypeElements();
		this.pLoop = new LoopElements();
		this.pIf_Impl = new If_ImplElements();
		this.pIfElse = new IfElseElements();
		this.pAssignAtDecl = new AssignAtDeclElements();
		this.pReAssign = new ReAssignElements();
		this.pSetSpeed = new SetSpeedElements();
		this.pRotation = new RotationElements();
		this.pFront = new FrontElements();
		this.pBack = new BackElements();
		this.pRight = new RightElements();
		this.pLeft = new LeftElements();
		this.pFunCall = new FunCallElements();
		this.pNeg = new NegElements();
		this.pNot = new NotElements();
		this.pGreater = new GreaterElements();
		this.pAnd = new AndElements();
		this.pAdd = new AddElements();
		this.pLess = new LessElements();
		this.pOr = new OrElements();
		this.pSub = new SubElements();
		this.pGEq = new GEqElements();
		this.pEqu = new EquElements();
		this.pMul = new MulElements();
		this.pLEq = new LEqElements();
		this.pNEq = new NEqElements();
		this.pDiv = new DivElements();
		this.pTimeSensor = new TimeSensorElements();
		this.pDistSensor = new DistSensorElements();
		this.pBoolLiteral = new BoolLiteralElements();
		this.pNumberLiteral = new NumberLiteralElements();
		this.pSpeedState = new SpeedStateElements();
		this.pVariable = new VariableElements();
		this.eUnit = new UnitElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("robotScript.RobotScript".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//EntryPoint returns EntryPoint:
	//    {EntryPoint}
	//    'EntryPoint'
	//    '{'
	//        ('functions' '{' functions+=FunctionDef ( "," functions+=FunctionDef)* '}' )?
	//    '}';
	public EntryPointElements getEntryPointAccess() {
		return pEntryPoint;
	}
	
	public ParserRule getEntryPointRule() {
		return getEntryPointAccess().getRule();
	}
	
	//AnyType returns AnyType:
	//    VoidType | NumberType | BooleanType;
	public AnyTypeElements getAnyTypeAccess() {
		return pAnyType;
	}
	
	public ParserRule getAnyTypeRule() {
		return getAnyTypeAccess().getRule();
	}
	
	//Command returns Command:
	//    VarDecl | Loop | If_Impl | IfElse | AssignAtDecl | ReAssign | SetSpeed | Rotation | Front | Back | Right | Left | FunCall;
	public CommandElements getCommandAccess() {
		return pCommand;
	}
	
	public ParserRule getCommandRule() {
		return getCommandAccess().getRule();
	}
	
	//DataType returns DataType:
	//    NumberType | BooleanType;
	public DataTypeElements getDataTypeAccess() {
		return pDataType;
	}
	
	public ParserRule getDataTypeRule() {
		return getDataTypeAccess().getRule();
	}
	
	//Expression returns Expression:
	//    Neg | Not | Greater | And | Add | Less | Or | Sub | GEq | Equ | Mul | LEq | NEq | Div | TimeSensor | DistSensor | BoolLiteral | NumberLiteral | SpeedState | Variable | FunCall;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//FunctionDef returns FunctionDef:
	//    'FunctionDef'
	//    name=EString
	//    '{'
	//        'returnType' returnType=AnyType
	//        ('body' '{' body+=Command ( "," body+=Command)* '}' )?
	//        ('inputs' '{' inputs+=VarDecl ( "," inputs+=VarDecl)* '}' )?
	//    '}';
	public FunctionDefElements getFunctionDefAccess() {
		return pFunctionDef;
	}
	
	public ParserRule getFunctionDefRule() {
		return getFunctionDefAccess().getRule();
	}
	
	//EString returns ecore::EString:
	//    STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//VarDecl returns VarDecl:
	//    'VarDecl'
	//    name=EString
	//    '{'
	//        'type' type=DataType
	//    '}';
	public VarDeclElements getVarDeclAccess() {
		return pVarDecl;
	}
	
	public ParserRule getVarDeclRule() {
		return getVarDeclAccess().getRule();
	}
	
	//VoidType returns VoidType:
	//    {VoidType}
	//    'VoidType'
	//    ;
	public VoidTypeElements getVoidTypeAccess() {
		return pVoidType;
	}
	
	public ParserRule getVoidTypeRule() {
		return getVoidTypeAccess().getRule();
	}
	
	//NumberType returns NumberType:
	//    {NumberType}
	//    'NumberType'
	//    ;
	public NumberTypeElements getNumberTypeAccess() {
		return pNumberType;
	}
	
	public ParserRule getNumberTypeRule() {
		return getNumberTypeAccess().getRule();
	}
	
	//BooleanType returns BooleanType:
	//    {BooleanType}
	//    'BooleanType'
	//    ;
	public BooleanTypeElements getBooleanTypeAccess() {
		return pBooleanType;
	}
	
	public ParserRule getBooleanTypeRule() {
		return getBooleanTypeAccess().getRule();
	}
	
	//Loop returns Loop:
	//    'Loop'
	//    '{'
	//        ('body' '{' body+=Command ( "," body+=Command)* '}' )?
	//        'cond' cond=Expression
	//    '}';
	public LoopElements getLoopAccess() {
		return pLoop;
	}
	
	public ParserRule getLoopRule() {
		return getLoopAccess().getRule();
	}
	
	//If_Impl returns If:
	//    'If'
	//    '{'
	//        ('body' '{' body+=Command ( "," body+=Command)* '}' )?
	//        'cond' cond=Expression
	//    '}';
	public If_ImplElements getIf_ImplAccess() {
		return pIf_Impl;
	}
	
	public ParserRule getIf_ImplRule() {
		return getIf_ImplAccess().getRule();
	}
	
	//IfElse returns IfElse:
	//    'IfElse'
	//    '{'
	//        ('body' '{' body+=Command ( "," body+=Command)* '}' )?
	//        'cond' cond=Expression
	//        ('bodyElse' '{' bodyElse+=Command ( "," bodyElse+=Command)* '}' )?
	//    '}';
	public IfElseElements getIfElseAccess() {
		return pIfElse;
	}
	
	public ParserRule getIfElseRule() {
		return getIfElseAccess().getRule();
	}
	
	//AssignAtDecl returns AssignAtDecl:
	//    'AssignAtDecl'
	//    '{'
	//        'expression' expression=Expression
	//        'vardecl' vardecl=VarDecl
	//    '}';
	public AssignAtDeclElements getAssignAtDeclAccess() {
		return pAssignAtDecl;
	}
	
	public ParserRule getAssignAtDeclRule() {
		return getAssignAtDeclAccess().getRule();
	}
	
	//ReAssign returns ReAssign:
	//    'ReAssign'
	//    '{'
	//        'var' var=[VarDecl|EString]
	//        'expression' expression=Expression
	//    '}';
	public ReAssignElements getReAssignAccess() {
		return pReAssign;
	}
	
	public ParserRule getReAssignRule() {
		return getReAssignAccess().getRule();
	}
	
	//SetSpeed returns SetSpeed:
	//    'SetSpeed'
	//    '{'
	//        ('unit' unit=Unit)?
	//        'speedstate' speedstate=[SpeedState|EString]
	//        'expression' expression=Expression
	//    '}';
	public SetSpeedElements getSetSpeedAccess() {
		return pSetSpeed;
	}
	
	public ParserRule getSetSpeedRule() {
		return getSetSpeedAccess().getRule();
	}
	
	//Rotation returns Rotation:
	//    'Rotation'
	//    '{'
	//        'expression' expression=Expression
	//    '}';
	public RotationElements getRotationAccess() {
		return pRotation;
	}
	
	public ParserRule getRotationRule() {
		return getRotationAccess().getRule();
	}
	
	//Front returns Front:
	//    'Front'
	//    '{'
	//        ('unit' unit=Unit)?
	//        'expression' expression=Expression
	//    '}';
	public FrontElements getFrontAccess() {
		return pFront;
	}
	
	public ParserRule getFrontRule() {
		return getFrontAccess().getRule();
	}
	
	//Back returns Back:
	//    'Back'
	//    '{'
	//        ('unit' unit=Unit)?
	//        'expression' expression=Expression
	//    '}';
	public BackElements getBackAccess() {
		return pBack;
	}
	
	public ParserRule getBackRule() {
		return getBackAccess().getRule();
	}
	
	//Right returns Right:
	//    'Right'
	//    '{'
	//        ('unit' unit=Unit)?
	//        'expression' expression=Expression
	//    '}';
	public RightElements getRightAccess() {
		return pRight;
	}
	
	public ParserRule getRightRule() {
		return getRightAccess().getRule();
	}
	
	//Left returns Left:
	//    'Left'
	//    '{'
	//        ('unit' unit=Unit)?
	//        'expression' expression=Expression
	//    '}';
	public LeftElements getLeftAccess() {
		return pLeft;
	}
	
	public ParserRule getLeftRule() {
		return getLeftAccess().getRule();
	}
	
	//FunCall returns FunCall:
	//    'FunCall'
	//    '{'
	//        'fun' fun=[FunctionDef|EString]
	//        ('inputs' '{' inputs+=Expression ( "," inputs+=Expression)* '}' )?
	//    '}';
	public FunCallElements getFunCallAccess() {
		return pFunCall;
	}
	
	public ParserRule getFunCallRule() {
		return getFunCallAccess().getRule();
	}
	
	//Neg returns Neg:
	//    'Neg'
	//    '{'
	//        'op' op=Expression
	//    '}';
	public NegElements getNegAccess() {
		return pNeg;
	}
	
	public ParserRule getNegRule() {
		return getNegAccess().getRule();
	}
	
	//Not returns Not:
	//    'Not'
	//    '{'
	//        'op' op=Expression
	//    '}';
	public NotElements getNotAccess() {
		return pNot;
	}
	
	public ParserRule getNotRule() {
		return getNotAccess().getRule();
	}
	
	//Greater returns Greater:
	//    'Greater'
	//    '{'
	//        'rightOp' rightOp=Expression
	//        'leftOp' leftOp=Expression
	//    '}';
	public GreaterElements getGreaterAccess() {
		return pGreater;
	}
	
	public ParserRule getGreaterRule() {
		return getGreaterAccess().getRule();
	}
	
	//And returns And:
	//    'And'
	//    '{'
	//        'rightOp' rightOp=Expression
	//        'leftOp' leftOp=Expression
	//    '}';
	public AndElements getAndAccess() {
		return pAnd;
	}
	
	public ParserRule getAndRule() {
		return getAndAccess().getRule();
	}
	
	//Add returns Add:
	//    'Add'
	//    '{'
	//        'rightOp' rightOp=Expression
	//        'leftOp' leftOp=Expression
	//    '}';
	public AddElements getAddAccess() {
		return pAdd;
	}
	
	public ParserRule getAddRule() {
		return getAddAccess().getRule();
	}
	
	//Less returns Less:
	//    'Less'
	//    '{'
	//        'rightOp' rightOp=Expression
	//        'leftOp' leftOp=Expression
	//    '}';
	public LessElements getLessAccess() {
		return pLess;
	}
	
	public ParserRule getLessRule() {
		return getLessAccess().getRule();
	}
	
	//Or returns Or:
	//    'Or'
	//    '{'
	//        'rightOp' rightOp=Expression
	//        'leftOp' leftOp=Expression
	//    '}';
	public OrElements getOrAccess() {
		return pOr;
	}
	
	public ParserRule getOrRule() {
		return getOrAccess().getRule();
	}
	
	//Sub returns Sub:
	//    'Sub'
	//    '{'
	//        'rightOp' rightOp=Expression
	//        'leftOp' leftOp=Expression
	//    '}';
	public SubElements getSubAccess() {
		return pSub;
	}
	
	public ParserRule getSubRule() {
		return getSubAccess().getRule();
	}
	
	//GEq returns GEq:
	//    'GEq'
	//    '{'
	//        'rightOp' rightOp=Expression
	//        'leftOp' leftOp=Expression
	//    '}';
	public GEqElements getGEqAccess() {
		return pGEq;
	}
	
	public ParserRule getGEqRule() {
		return getGEqAccess().getRule();
	}
	
	//Equ returns Equ:
	//    'Equ'
	//    '{'
	//        'rightOp' rightOp=Expression
	//        'leftOp' leftOp=Expression
	//    '}';
	public EquElements getEquAccess() {
		return pEqu;
	}
	
	public ParserRule getEquRule() {
		return getEquAccess().getRule();
	}
	
	//Mul returns Mul:
	//    'Mul'
	//    '{'
	//        'rightOp' rightOp=Expression
	//        'leftOp' leftOp=Expression
	//    '}';
	public MulElements getMulAccess() {
		return pMul;
	}
	
	public ParserRule getMulRule() {
		return getMulAccess().getRule();
	}
	
	//LEq returns LEq:
	//    'LEq'
	//    '{'
	//        'rightOp' rightOp=Expression
	//        'leftOp' leftOp=Expression
	//    '}';
	public LEqElements getLEqAccess() {
		return pLEq;
	}
	
	public ParserRule getLEqRule() {
		return getLEqAccess().getRule();
	}
	
	//NEq returns NEq:
	//    'NEq'
	//    '{'
	//        'rightOp' rightOp=Expression
	//        'leftOp' leftOp=Expression
	//    '}';
	public NEqElements getNEqAccess() {
		return pNEq;
	}
	
	public ParserRule getNEqRule() {
		return getNEqAccess().getRule();
	}
	
	//Div returns Div:
	//    'Div'
	//    '{'
	//        'rightOp' rightOp=Expression
	//        'leftOp' leftOp=Expression
	//    '}';
	public DivElements getDivAccess() {
		return pDiv;
	}
	
	public ParserRule getDivRule() {
		return getDivAccess().getRule();
	}
	
	//TimeSensor returns TimeSensor:
	//    {TimeSensor}
	//    'TimeSensor'
	//    ;
	public TimeSensorElements getTimeSensorAccess() {
		return pTimeSensor;
	}
	
	public ParserRule getTimeSensorRule() {
		return getTimeSensorAccess().getRule();
	}
	
	//DistSensor returns DistSensor:
	//    {DistSensor}
	//    'DistSensor'
	//    ;
	public DistSensorElements getDistSensorAccess() {
		return pDistSensor;
	}
	
	public ParserRule getDistSensorRule() {
		return getDistSensorAccess().getRule();
	}
	
	//BoolLiteral returns BoolLiteral:
	//    {BoolLiteral}
	//    'BoolLiteral'
	//    ;
	public BoolLiteralElements getBoolLiteralAccess() {
		return pBoolLiteral;
	}
	
	public ParserRule getBoolLiteralRule() {
		return getBoolLiteralAccess().getRule();
	}
	
	//NumberLiteral returns NumberLiteral:
	//    {NumberLiteral}
	//    'NumberLiteral'
	//    ;
	public NumberLiteralElements getNumberLiteralAccess() {
		return pNumberLiteral;
	}
	
	public ParserRule getNumberLiteralRule() {
		return getNumberLiteralAccess().getRule();
	}
	
	//SpeedState returns SpeedState:
	//    {SpeedState}
	//    'SpeedState'
	//    ;
	public SpeedStateElements getSpeedStateAccess() {
		return pSpeedState;
	}
	
	public ParserRule getSpeedStateRule() {
		return getSpeedStateAccess().getRule();
	}
	
	//Variable returns Variable:
	//    'Variable'
	//    '{'
	//        'var' var=[VarDecl|EString]
	//    '}';
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	//enum Unit returns Unit:
	//                M = 'M' | DM = 'DM' | CM = 'CM' | MM = 'MM';
	public UnitElements getUnitAccess() {
		return eUnit;
	}
	
	public EnumRule getUnitRule() {
		return getUnitAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
