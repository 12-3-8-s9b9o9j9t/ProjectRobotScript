/*
 * generated by Xtext 2.32.0
 */
package robotScript.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class RobotScriptGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robotScript.RobotScript.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cModelAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cModelKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommandKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cCommandAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cCommandCommandParserRuleCall_3_2_0 = (RuleCall)cCommandAssignment_3_2.eContents().get(0);
		private final Group cGroup_3_3 = (Group)cGroup_3.eContents().get(3);
		private final Keyword cCommaKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Assignment cCommandAssignment_3_3_1 = (Assignment)cGroup_3_3.eContents().get(1);
		private final RuleCall cCommandCommandParserRuleCall_3_3_1_0 = (RuleCall)cCommandAssignment_3_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Model returns Model:
		//    {Model}
		//    'Model'
		//    '{'
		//        ('command' '{' command+=Command ( "," command+=Command)* '}' )?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Model}
		//'Model'
		//'{'
		//    ('command' '{' command+=Command ( "," command+=Command)* '}' )?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{Model}
		public Action getModelAction_0() { return cModelAction_0; }
		
		//'Model'
		public Keyword getModelKeyword_1() { return cModelKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('command' '{' command+=Command ( "," command+=Command)* '}' )?
		public Group getGroup_3() { return cGroup_3; }
		
		//'command'
		public Keyword getCommandKeyword_3_0() { return cCommandKeyword_3_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_1() { return cLeftCurlyBracketKeyword_3_1; }
		
		//command+=Command
		public Assignment getCommandAssignment_3_2() { return cCommandAssignment_3_2; }
		
		//Command
		public RuleCall getCommandCommandParserRuleCall_3_2_0() { return cCommandCommandParserRuleCall_3_2_0; }
		
		//( "," command+=Command)*
		public Group getGroup_3_3() { return cGroup_3_3; }
		
		//","
		public Keyword getCommaKeyword_3_3_0() { return cCommaKeyword_3_3_0; }
		
		//command+=Command
		public Assignment getCommandAssignment_3_3_1() { return cCommandAssignment_3_3_1; }
		
		//Command
		public RuleCall getCommandCommandParserRuleCall_3_3_1_0() { return cCommandCommandParserRuleCall_3_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_4() { return cRightCurlyBracketKeyword_3_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class CommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robotScript.RobotScript.Command");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRotationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLinearParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cClockParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cUltraSoundParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cSpeedParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cLoopParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cSwitchParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cDefVarParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		//Command returns Command:
		//    Rotation | Linear | Clock | UltraSound | Speed | Loop | Switch | DefVar;
		@Override public ParserRule getRule() { return rule; }
		
		//Rotation | Linear | Clock | UltraSound | Speed | Loop | Switch | DefVar
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Rotation
		public RuleCall getRotationParserRuleCall_0() { return cRotationParserRuleCall_0; }
		
		//Linear
		public RuleCall getLinearParserRuleCall_1() { return cLinearParserRuleCall_1; }
		
		//Clock
		public RuleCall getClockParserRuleCall_2() { return cClockParserRuleCall_2; }
		
		//UltraSound
		public RuleCall getUltraSoundParserRuleCall_3() { return cUltraSoundParserRuleCall_3; }
		
		//Speed
		public RuleCall getSpeedParserRuleCall_4() { return cSpeedParserRuleCall_4; }
		
		//Loop
		public RuleCall getLoopParserRuleCall_5() { return cLoopParserRuleCall_5; }
		
		//Switch
		public RuleCall getSwitchParserRuleCall_6() { return cSwitchParserRuleCall_6; }
		
		//DefVar
		public RuleCall getDefVarParserRuleCall_7() { return cDefVarParserRuleCall_7; }
	}
	public class BooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robotScript.RobotScript.Boolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBoolVariablesParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAndParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cOrParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cNotParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cBoolLiteralParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Boolean returns Boolean:
		//    BoolVariables | And | Or | Not | BoolLiteral;
		@Override public ParserRule getRule() { return rule; }
		
		//BoolVariables | And | Or | Not | BoolLiteral
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BoolVariables
		public RuleCall getBoolVariablesParserRuleCall_0() { return cBoolVariablesParserRuleCall_0; }
		
		//And
		public RuleCall getAndParserRuleCall_1() { return cAndParserRuleCall_1; }
		
		//Or
		public RuleCall getOrParserRuleCall_2() { return cOrParserRuleCall_2; }
		
		//Not
		public RuleCall getNotParserRuleCall_3() { return cNotParserRuleCall_3; }
		
		//BoolLiteral
		public RuleCall getBoolLiteralParserRuleCall_4() { return cBoolLiteralParserRuleCall_4; }
	}
	public class ExpressionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robotScript.RobotScript.Expressions");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBoolVariablesParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAndParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cOrParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cNotParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cBoolLiteralParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cAddParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cAriLiteralParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cAriVariablesParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cSubParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cNegParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		
		//Expressions returns Expressions:
		//    BoolVariables | And | Or | Not | BoolLiteral | Add | AriLiteral | AriVariables | Sub | Neg;
		@Override public ParserRule getRule() { return rule; }
		
		//BoolVariables | And | Or | Not | BoolLiteral | Add | AriLiteral | AriVariables | Sub | Neg
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BoolVariables
		public RuleCall getBoolVariablesParserRuleCall_0() { return cBoolVariablesParserRuleCall_0; }
		
		//And
		public RuleCall getAndParserRuleCall_1() { return cAndParserRuleCall_1; }
		
		//Or
		public RuleCall getOrParserRuleCall_2() { return cOrParserRuleCall_2; }
		
		//Not
		public RuleCall getNotParserRuleCall_3() { return cNotParserRuleCall_3; }
		
		//BoolLiteral
		public RuleCall getBoolLiteralParserRuleCall_4() { return cBoolLiteralParserRuleCall_4; }
		
		//Add
		public RuleCall getAddParserRuleCall_5() { return cAddParserRuleCall_5; }
		
		//AriLiteral
		public RuleCall getAriLiteralParserRuleCall_6() { return cAriLiteralParserRuleCall_6; }
		
		//AriVariables
		public RuleCall getAriVariablesParserRuleCall_7() { return cAriVariablesParserRuleCall_7; }
		
		//Sub
		public RuleCall getSubParserRuleCall_8() { return cSubParserRuleCall_8; }
		
		//Neg
		public RuleCall getNegParserRuleCall_9() { return cNegParserRuleCall_9; }
	}
	public class UnitsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robotScript.RobotScript.Units");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMeterParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSecondParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDegreeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Units returns Units:
		//    Meter | Second | Degree;
		@Override public ParserRule getRule() { return rule; }
		
		//Meter | Second | Degree
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Meter
		public RuleCall getMeterParserRuleCall_0() { return cMeterParserRuleCall_0; }
		
		//Second
		public RuleCall getSecondParserRuleCall_1() { return cSecondParserRuleCall_1; }
		
		//Degree
		public RuleCall getDegreeParserRuleCall_2() { return cDegreeParserRuleCall_2; }
	}
	public class ArithmeticElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robotScript.RobotScript.Arithmetic");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAddParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAriLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAriVariablesParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSubParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cNegParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Arithmetic returns Arithmetic:
		//    Add | AriLiteral | AriVariables | Sub | Neg;
		@Override public ParserRule getRule() { return rule; }
		
		//Add | AriLiteral | AriVariables | Sub | Neg
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Add
		public RuleCall getAddParserRuleCall_0() { return cAddParserRuleCall_0; }
		
		//AriLiteral
		public RuleCall getAriLiteralParserRuleCall_1() { return cAriLiteralParserRuleCall_1; }
		
		//AriVariables
		public RuleCall getAriVariablesParserRuleCall_2() { return cAriVariablesParserRuleCall_2; }
		
		//Sub
		public RuleCall getSubParserRuleCall_3() { return cSubParserRuleCall_3; }
		
		//Neg
		public RuleCall getNegParserRuleCall_4() { return cNegParserRuleCall_4; }
	}
	public class PrefixElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robotScript.RobotScript.Prefix");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMiliParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCentiParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Prefix returns Prefix:
		//    Mili | Centi;
		@Override public ParserRule getRule() { return rule; }
		
		//Mili | Centi
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Mili
		public RuleCall getMiliParserRuleCall_0() { return cMiliParserRuleCall_0; }
		
		//Centi
		public RuleCall getCentiParserRuleCall_1() { return cCentiParserRuleCall_1; }
	}
	public class RotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robotScript.RobotScript.Rotation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRotationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cDefvarKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDefvarAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDefvarCommandParserRuleCall_4_0 = (RuleCall)cDefvarAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cDefvarAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cDefvarCommandParserRuleCall_5_1_0 = (RuleCall)cDefvarAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Rotation returns Rotation:
		//    'Rotation'
		//    '{'
		//        'defvar' '{' defvar+=Command ( "," defvar+=Command)* '}'
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Rotation'
		//'{'
		//    'defvar' '{' defvar+=Command ( "," defvar+=Command)* '}'
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Rotation'
		public Keyword getRotationKeyword_0() { return cRotationKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'defvar'
		public Keyword getDefvarKeyword_2() { return cDefvarKeyword_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//defvar+=Command
		public Assignment getDefvarAssignment_4() { return cDefvarAssignment_4; }
		
		//Command
		public RuleCall getDefvarCommandParserRuleCall_4_0() { return cDefvarCommandParserRuleCall_4_0; }
		
		//( "," defvar+=Command)*
		public Group getGroup_5() { return cGroup_5; }
		
		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//defvar+=Command
		public Assignment getDefvarAssignment_5_1() { return cDefvarAssignment_5_1; }
		
		//Command
		public RuleCall getDefvarCommandParserRuleCall_5_1_0() { return cDefvarCommandParserRuleCall_5_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class LinearElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robotScript.RobotScript.Linear");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLinearKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cDefvarKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDefvarAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDefvarCommandParserRuleCall_4_0 = (RuleCall)cDefvarAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cDefvarAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cDefvarCommandParserRuleCall_5_1_0 = (RuleCall)cDefvarAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Linear returns Linear:
		//    'Linear'
		//    '{'
		//        'defvar' '{' defvar+=Command ( "," defvar+=Command)* '}'
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Linear'
		//'{'
		//    'defvar' '{' defvar+=Command ( "," defvar+=Command)* '}'
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Linear'
		public Keyword getLinearKeyword_0() { return cLinearKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'defvar'
		public Keyword getDefvarKeyword_2() { return cDefvarKeyword_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//defvar+=Command
		public Assignment getDefvarAssignment_4() { return cDefvarAssignment_4; }
		
		//Command
		public RuleCall getDefvarCommandParserRuleCall_4_0() { return cDefvarCommandParserRuleCall_4_0; }
		
		//( "," defvar+=Command)*
		public Group getGroup_5() { return cGroup_5; }
		
		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//defvar+=Command
		public Assignment getDefvarAssignment_5_1() { return cDefvarAssignment_5_1; }
		
		//Command
		public RuleCall getDefvarCommandParserRuleCall_5_1_0() { return cDefvarCommandParserRuleCall_5_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class ClockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robotScript.RobotScript.Clock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cClockKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cDefvarKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDefvarAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDefvarCommandParserRuleCall_4_0 = (RuleCall)cDefvarAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cDefvarAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cDefvarCommandParserRuleCall_5_1_0 = (RuleCall)cDefvarAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Clock returns Clock:
		//    'Clock'
		//    '{'
		//        'defvar' '{' defvar+=Command ( "," defvar+=Command)* '}'
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Clock'
		//'{'
		//    'defvar' '{' defvar+=Command ( "," defvar+=Command)* '}'
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Clock'
		public Keyword getClockKeyword_0() { return cClockKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'defvar'
		public Keyword getDefvarKeyword_2() { return cDefvarKeyword_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//defvar+=Command
		public Assignment getDefvarAssignment_4() { return cDefvarAssignment_4; }
		
		//Command
		public RuleCall getDefvarCommandParserRuleCall_4_0() { return cDefvarCommandParserRuleCall_4_0; }
		
		//( "," defvar+=Command)*
		public Group getGroup_5() { return cGroup_5; }
		
		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//defvar+=Command
		public Assignment getDefvarAssignment_5_1() { return cDefvarAssignment_5_1; }
		
		//Command
		public RuleCall getDefvarCommandParserRuleCall_5_1_0() { return cDefvarCommandParserRuleCall_5_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class UltraSoundElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robotScript.RobotScript.UltraSound");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUltraSoundKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cDefvarKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDefvarAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDefvarCommandParserRuleCall_4_0 = (RuleCall)cDefvarAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cDefvarAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cDefvarCommandParserRuleCall_5_1_0 = (RuleCall)cDefvarAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//UltraSound returns UltraSound:
		//    'UltraSound'
		//    '{'
		//        'defvar' '{' defvar+=Command ( "," defvar+=Command)* '}'
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'UltraSound'
		//'{'
		//    'defvar' '{' defvar+=Command ( "," defvar+=Command)* '}'
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'UltraSound'
		public Keyword getUltraSoundKeyword_0() { return cUltraSoundKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'defvar'
		public Keyword getDefvarKeyword_2() { return cDefvarKeyword_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//defvar+=Command
		public Assignment getDefvarAssignment_4() { return cDefvarAssignment_4; }
		
		//Command
		public RuleCall getDefvarCommandParserRuleCall_4_0() { return cDefvarCommandParserRuleCall_4_0; }
		
		//( "," defvar+=Command)*
		public Group getGroup_5() { return cGroup_5; }
		
		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//defvar+=Command
		public Assignment getDefvarAssignment_5_1() { return cDefvarAssignment_5_1; }
		
		//Command
		public RuleCall getDefvarCommandParserRuleCall_5_1_0() { return cDefvarCommandParserRuleCall_5_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class SpeedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robotScript.RobotScript.Speed");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSpeedKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cDefvarKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDefvarAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDefvarCommandParserRuleCall_4_0 = (RuleCall)cDefvarAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cDefvarAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cDefvarCommandParserRuleCall_5_1_0 = (RuleCall)cDefvarAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Speed returns Speed:
		//    'Speed'
		//    '{'
		//        'defvar' '{' defvar+=Command ( "," defvar+=Command)* '}'
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Speed'
		//'{'
		//    'defvar' '{' defvar+=Command ( "," defvar+=Command)* '}'
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Speed'
		public Keyword getSpeedKeyword_0() { return cSpeedKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'defvar'
		public Keyword getDefvarKeyword_2() { return cDefvarKeyword_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//defvar+=Command
		public Assignment getDefvarAssignment_4() { return cDefvarAssignment_4; }
		
		//Command
		public RuleCall getDefvarCommandParserRuleCall_4_0() { return cDefvarCommandParserRuleCall_4_0; }
		
		//( "," defvar+=Command)*
		public Group getGroup_5() { return cGroup_5; }
		
		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//defvar+=Command
		public Assignment getDefvarAssignment_5_1() { return cDefvarAssignment_5_1; }
		
		//Command
		public RuleCall getDefvarCommandParserRuleCall_5_1_0() { return cDefvarCommandParserRuleCall_5_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class LoopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robotScript.RobotScript.Loop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLoopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLoopConditionKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLoopConditionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLoopConditionBooleanParserRuleCall_3_0 = (RuleCall)cLoopConditionAssignment_3.eContents().get(0);
		private final Keyword cBodyKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cBodyAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cBodyCommandParserRuleCall_6_0 = (RuleCall)cBodyAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cCommaKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cBodyAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cBodyCommandParserRuleCall_7_1_0 = (RuleCall)cBodyAssignment_7_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//Loop returns Loop:
		//    'Loop'
		//    '{'
		//        'loopCondition' loopCondition=Boolean
		//        'body' '{' body+=Command ( "," body+=Command)* '}'
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Loop'
		//'{'
		//    'loopCondition' loopCondition=Boolean
		//    'body' '{' body+=Command ( "," body+=Command)* '}'
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Loop'
		public Keyword getLoopKeyword_0() { return cLoopKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'loopCondition'
		public Keyword getLoopConditionKeyword_2() { return cLoopConditionKeyword_2; }
		
		//loopCondition=Boolean
		public Assignment getLoopConditionAssignment_3() { return cLoopConditionAssignment_3; }
		
		//Boolean
		public RuleCall getLoopConditionBooleanParserRuleCall_3_0() { return cLoopConditionBooleanParserRuleCall_3_0; }
		
		//'body'
		public Keyword getBodyKeyword_4() { return cBodyKeyword_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//body+=Command
		public Assignment getBodyAssignment_6() { return cBodyAssignment_6; }
		
		//Command
		public RuleCall getBodyCommandParserRuleCall_6_0() { return cBodyCommandParserRuleCall_6_0; }
		
		//( "," body+=Command)*
		public Group getGroup_7() { return cGroup_7; }
		
		//","
		public Keyword getCommaKeyword_7_0() { return cCommaKeyword_7_0; }
		
		//body+=Command
		public Assignment getBodyAssignment_7_1() { return cBodyAssignment_7_1; }
		
		//Command
		public RuleCall getBodyCommandParserRuleCall_7_1_0() { return cBodyCommandParserRuleCall_7_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class SwitchElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robotScript.RobotScript.Switch");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSwitchKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cSwitchConditionKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSwitchConditionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSwitchConditionBooleanParserRuleCall_3_0 = (RuleCall)cSwitchConditionAssignment_3.eContents().get(0);
		private final Keyword cBodyKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cBodyAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cBodyCommandParserRuleCall_6_0 = (RuleCall)cBodyAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cCommaKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cBodyAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cBodyCommandParserRuleCall_7_1_0 = (RuleCall)cBodyAssignment_7_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//Switch returns Switch:
		//    'Switch'
		//    '{'
		//        'switchCondition' switchCondition=Boolean
		//        'body' '{' body+=Command ( "," body+=Command)* '}'
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Switch'
		//'{'
		//    'switchCondition' switchCondition=Boolean
		//    'body' '{' body+=Command ( "," body+=Command)* '}'
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Switch'
		public Keyword getSwitchKeyword_0() { return cSwitchKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'switchCondition'
		public Keyword getSwitchConditionKeyword_2() { return cSwitchConditionKeyword_2; }
		
		//switchCondition=Boolean
		public Assignment getSwitchConditionAssignment_3() { return cSwitchConditionAssignment_3; }
		
		//Boolean
		public RuleCall getSwitchConditionBooleanParserRuleCall_3_0() { return cSwitchConditionBooleanParserRuleCall_3_0; }
		
		//'body'
		public Keyword getBodyKeyword_4() { return cBodyKeyword_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//body+=Command
		public Assignment getBodyAssignment_6() { return cBodyAssignment_6; }
		
		//Command
		public RuleCall getBodyCommandParserRuleCall_6_0() { return cBodyCommandParserRuleCall_6_0; }
		
		//( "," body+=Command)*
		public Group getGroup_7() { return cGroup_7; }
		
		//","
		public Keyword getCommaKeyword_7_0() { return cCommaKeyword_7_0; }
		
		//body+=Command
		public Assignment getBodyAssignment_7_1() { return cBodyAssignment_7_1; }
		
		//Command
		public RuleCall getBodyCommandParserRuleCall_7_1_0() { return cBodyCommandParserRuleCall_7_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class DefVarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robotScript.RobotScript.DefVar");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDefVarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cExpressionsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExpressionsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExpressionsExpressionsParserRuleCall_4_0 = (RuleCall)cExpressionsAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cUnitsKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cUnitsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cUnitsUnitsParserRuleCall_5_1_0 = (RuleCall)cUnitsAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//DefVar returns DefVar:
		//    'DefVar'
		//    name=EString
		//    '{'
		//        'expressions' expressions=Expressions
		//        ('units' units=Units)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'DefVar'
		//name=EString
		//'{'
		//    'expressions' expressions=Expressions
		//    ('units' units=Units)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'DefVar'
		public Keyword getDefVarKeyword_0() { return cDefVarKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'expressions'
		public Keyword getExpressionsKeyword_3() { return cExpressionsKeyword_3; }
		
		//expressions=Expressions
		public Assignment getExpressionsAssignment_4() { return cExpressionsAssignment_4; }
		
		//Expressions
		public RuleCall getExpressionsExpressionsParserRuleCall_4_0() { return cExpressionsExpressionsParserRuleCall_4_0; }
		
		//('units' units=Units)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'units'
		public Keyword getUnitsKeyword_5_0() { return cUnitsKeyword_5_0; }
		
		//units=Units
		public Assignment getUnitsAssignment_5_1() { return cUnitsAssignment_5_1; }
		
		//Units
		public RuleCall getUnitsUnitsParserRuleCall_5_1_0() { return cUnitsUnitsParserRuleCall_5_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class BoolVariablesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robotScript.RobotScript.BoolVariables");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBoolVariablesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cReferenceKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cReferenceAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cReferenceDefVarCrossReference_3_0 = (CrossReference)cReferenceAssignment_3.eContents().get(0);
		private final RuleCall cReferenceDefVarEStringParserRuleCall_3_0_1 = (RuleCall)cReferenceDefVarCrossReference_3_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//BoolVariables returns BoolVariables:
		//    'BoolVariables'
		//    '{'
		//        'reference' reference=[DefVar|EString]
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'BoolVariables'
		//'{'
		//    'reference' reference=[DefVar|EString]
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'BoolVariables'
		public Keyword getBoolVariablesKeyword_0() { return cBoolVariablesKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'reference'
		public Keyword getReferenceKeyword_2() { return cReferenceKeyword_2; }
		
		//reference=[DefVar|EString]
		public Assignment getReferenceAssignment_3() { return cReferenceAssignment_3; }
		
		//[DefVar|EString]
		public CrossReference getReferenceDefVarCrossReference_3_0() { return cReferenceDefVarCrossReference_3_0; }
		
		//EString
		public RuleCall getReferenceDefVarEStringParserRuleCall_3_0_1() { return cReferenceDefVarEStringParserRuleCall_3_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class AndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robotScript.RobotScript.And");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAndKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLeftAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLeftBooleanParserRuleCall_3_0 = (RuleCall)cLeftAssignment_3.eContents().get(0);
		private final Keyword cRightKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cRightAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cRightBooleanParserRuleCall_5_0 = (RuleCall)cRightAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//And returns And:
		//    'And'
		//    '{'
		//        'left' left=Boolean
		//        'right' right=Boolean
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'And'
		//'{'
		//    'left' left=Boolean
		//    'right' right=Boolean
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'And'
		public Keyword getAndKeyword_0() { return cAndKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'left'
		public Keyword getLeftKeyword_2() { return cLeftKeyword_2; }
		
		//left=Boolean
		public Assignment getLeftAssignment_3() { return cLeftAssignment_3; }
		
		//Boolean
		public RuleCall getLeftBooleanParserRuleCall_3_0() { return cLeftBooleanParserRuleCall_3_0; }
		
		//'right'
		public Keyword getRightKeyword_4() { return cRightKeyword_4; }
		
		//right=Boolean
		public Assignment getRightAssignment_5() { return cRightAssignment_5; }
		
		//Boolean
		public RuleCall getRightBooleanParserRuleCall_5_0() { return cRightBooleanParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class OrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robotScript.RobotScript.Or");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOrKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLeftAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLeftBooleanParserRuleCall_3_0 = (RuleCall)cLeftAssignment_3.eContents().get(0);
		private final Keyword cRightKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cRightAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cRightBooleanParserRuleCall_5_0 = (RuleCall)cRightAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Or returns Or:
		//    'Or'
		//    '{'
		//        'left' left=Boolean
		//        'right' right=Boolean
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Or'
		//'{'
		//    'left' left=Boolean
		//    'right' right=Boolean
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Or'
		public Keyword getOrKeyword_0() { return cOrKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'left'
		public Keyword getLeftKeyword_2() { return cLeftKeyword_2; }
		
		//left=Boolean
		public Assignment getLeftAssignment_3() { return cLeftAssignment_3; }
		
		//Boolean
		public RuleCall getLeftBooleanParserRuleCall_3_0() { return cLeftBooleanParserRuleCall_3_0; }
		
		//'right'
		public Keyword getRightKeyword_4() { return cRightKeyword_4; }
		
		//right=Boolean
		public Assignment getRightAssignment_5() { return cRightAssignment_5; }
		
		//Boolean
		public RuleCall getRightBooleanParserRuleCall_5_0() { return cRightBooleanParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class NotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robotScript.RobotScript.Not");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNotKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cOperandKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOperandAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOperandBooleanParserRuleCall_3_0 = (RuleCall)cOperandAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Not returns Not:
		//    'Not'
		//    '{'
		//        'operand' operand=Boolean
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Not'
		//'{'
		//    'operand' operand=Boolean
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Not'
		public Keyword getNotKeyword_0() { return cNotKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'operand'
		public Keyword getOperandKeyword_2() { return cOperandKeyword_2; }
		
		//operand=Boolean
		public Assignment getOperandAssignment_3() { return cOperandAssignment_3; }
		
		//Boolean
		public RuleCall getOperandBooleanParserRuleCall_3_0() { return cOperandBooleanParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class BoolLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robotScript.RobotScript.BoolLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBoolLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBoolLiteralKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//BoolLiteral returns BoolLiteral:
		//    {BoolLiteral}
		//    'BoolLiteral'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{BoolLiteral}
		//'BoolLiteral'
		public Group getGroup() { return cGroup; }
		
		//{BoolLiteral}
		public Action getBoolLiteralAction_0() { return cBoolLiteralAction_0; }
		
		//'BoolLiteral'
		public Keyword getBoolLiteralKeyword_1() { return cBoolLiteralKeyword_1; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robotScript.RobotScript.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//    STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class AddElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robotScript.RobotScript.Add");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAddKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cRightKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRightAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightArithmeticParserRuleCall_3_0 = (RuleCall)cRightAssignment_3.eContents().get(0);
		private final Keyword cLeftKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cLeftAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cLeftArithmeticParserRuleCall_5_0 = (RuleCall)cLeftAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Add returns Add:
		//    'Add'
		//    '{'
		//        'right' right=Arithmetic
		//        'left' left=Arithmetic
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Add'
		//'{'
		//    'right' right=Arithmetic
		//    'left' left=Arithmetic
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Add'
		public Keyword getAddKeyword_0() { return cAddKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'right'
		public Keyword getRightKeyword_2() { return cRightKeyword_2; }
		
		//right=Arithmetic
		public Assignment getRightAssignment_3() { return cRightAssignment_3; }
		
		//Arithmetic
		public RuleCall getRightArithmeticParserRuleCall_3_0() { return cRightArithmeticParserRuleCall_3_0; }
		
		//'left'
		public Keyword getLeftKeyword_4() { return cLeftKeyword_4; }
		
		//left=Arithmetic
		public Assignment getLeftAssignment_5() { return cLeftAssignment_5; }
		
		//Arithmetic
		public RuleCall getLeftArithmeticParserRuleCall_5_0() { return cLeftArithmeticParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class AriLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robotScript.RobotScript.AriLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAriLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAriLiteralKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cUnitsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cUnitsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cUnitsUnitsParserRuleCall_3_1_0 = (RuleCall)cUnitsAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//AriLiteral returns AriLiteral:
		//    {AriLiteral}
		//    'AriLiteral'
		//    '{'
		//        ('units' units=Units)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{AriLiteral}
		//'AriLiteral'
		//'{'
		//    ('units' units=Units)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{AriLiteral}
		public Action getAriLiteralAction_0() { return cAriLiteralAction_0; }
		
		//'AriLiteral'
		public Keyword getAriLiteralKeyword_1() { return cAriLiteralKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('units' units=Units)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'units'
		public Keyword getUnitsKeyword_3_0() { return cUnitsKeyword_3_0; }
		
		//units=Units
		public Assignment getUnitsAssignment_3_1() { return cUnitsAssignment_3_1; }
		
		//Units
		public RuleCall getUnitsUnitsParserRuleCall_3_1_0() { return cUnitsUnitsParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class AriVariablesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robotScript.RobotScript.AriVariables");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAriVariablesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cReferenceKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cReferenceAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cReferenceDefVarCrossReference_3_0 = (CrossReference)cReferenceAssignment_3.eContents().get(0);
		private final RuleCall cReferenceDefVarEStringParserRuleCall_3_0_1 = (RuleCall)cReferenceDefVarCrossReference_3_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//AriVariables returns AriVariables:
		//    'AriVariables'
		//    '{'
		//        'reference' reference=[DefVar|EString]
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'AriVariables'
		//'{'
		//    'reference' reference=[DefVar|EString]
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'AriVariables'
		public Keyword getAriVariablesKeyword_0() { return cAriVariablesKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'reference'
		public Keyword getReferenceKeyword_2() { return cReferenceKeyword_2; }
		
		//reference=[DefVar|EString]
		public Assignment getReferenceAssignment_3() { return cReferenceAssignment_3; }
		
		//[DefVar|EString]
		public CrossReference getReferenceDefVarCrossReference_3_0() { return cReferenceDefVarCrossReference_3_0; }
		
		//EString
		public RuleCall getReferenceDefVarEStringParserRuleCall_3_0_1() { return cReferenceDefVarEStringParserRuleCall_3_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class SubElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robotScript.RobotScript.Sub");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSubKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cRightKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRightAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightArithmeticParserRuleCall_3_0 = (RuleCall)cRightAssignment_3.eContents().get(0);
		private final Keyword cLeftKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cLeftAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cLeftArithmeticParserRuleCall_5_0 = (RuleCall)cLeftAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Sub returns Sub:
		//    'Sub'
		//    '{'
		//        'right' right=Arithmetic
		//        'left' left=Arithmetic
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Sub'
		//'{'
		//    'right' right=Arithmetic
		//    'left' left=Arithmetic
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Sub'
		public Keyword getSubKeyword_0() { return cSubKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'right'
		public Keyword getRightKeyword_2() { return cRightKeyword_2; }
		
		//right=Arithmetic
		public Assignment getRightAssignment_3() { return cRightAssignment_3; }
		
		//Arithmetic
		public RuleCall getRightArithmeticParserRuleCall_3_0() { return cRightArithmeticParserRuleCall_3_0; }
		
		//'left'
		public Keyword getLeftKeyword_4() { return cLeftKeyword_4; }
		
		//left=Arithmetic
		public Assignment getLeftAssignment_5() { return cLeftAssignment_5; }
		
		//Arithmetic
		public RuleCall getLeftArithmeticParserRuleCall_5_0() { return cLeftArithmeticParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class NegElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robotScript.RobotScript.Neg");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNegKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cOperandKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOperandAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOperandArithmeticParserRuleCall_3_0 = (RuleCall)cOperandAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Neg returns Neg:
		//    'Neg'
		//    '{'
		//        'operand' operand=Arithmetic
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Neg'
		//'{'
		//    'operand' operand=Arithmetic
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Neg'
		public Keyword getNegKeyword_0() { return cNegKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'operand'
		public Keyword getOperandKeyword_2() { return cOperandKeyword_2; }
		
		//operand=Arithmetic
		public Assignment getOperandAssignment_3() { return cOperandAssignment_3; }
		
		//Arithmetic
		public RuleCall getOperandArithmeticParserRuleCall_3_0() { return cOperandArithmeticParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class MeterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robotScript.RobotScript.Meter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMeterAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cMeterKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cPrefixKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cPrefixAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cPrefixPrefixParserRuleCall_3_1_0 = (RuleCall)cPrefixAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Meter returns Meter:
		//    {Meter}
		//    'Meter'
		//    '{'
		//        ('prefix' prefix=Prefix)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Meter}
		//'Meter'
		//'{'
		//    ('prefix' prefix=Prefix)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{Meter}
		public Action getMeterAction_0() { return cMeterAction_0; }
		
		//'Meter'
		public Keyword getMeterKeyword_1() { return cMeterKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('prefix' prefix=Prefix)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'prefix'
		public Keyword getPrefixKeyword_3_0() { return cPrefixKeyword_3_0; }
		
		//prefix=Prefix
		public Assignment getPrefixAssignment_3_1() { return cPrefixAssignment_3_1; }
		
		//Prefix
		public RuleCall getPrefixPrefixParserRuleCall_3_1_0() { return cPrefixPrefixParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class SecondElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robotScript.RobotScript.Second");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSecondAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSecondKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cPrefixKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cPrefixAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cPrefixPrefixParserRuleCall_3_1_0 = (RuleCall)cPrefixAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Second returns Second:
		//    {Second}
		//    'Second'
		//    '{'
		//        ('prefix' prefix=Prefix)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Second}
		//'Second'
		//'{'
		//    ('prefix' prefix=Prefix)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{Second}
		public Action getSecondAction_0() { return cSecondAction_0; }
		
		//'Second'
		public Keyword getSecondKeyword_1() { return cSecondKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('prefix' prefix=Prefix)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'prefix'
		public Keyword getPrefixKeyword_3_0() { return cPrefixKeyword_3_0; }
		
		//prefix=Prefix
		public Assignment getPrefixAssignment_3_1() { return cPrefixAssignment_3_1; }
		
		//Prefix
		public RuleCall getPrefixPrefixParserRuleCall_3_1_0() { return cPrefixPrefixParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class DegreeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robotScript.RobotScript.Degree");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDegreeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDegreeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cPrefixKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cPrefixAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cPrefixPrefixParserRuleCall_3_1_0 = (RuleCall)cPrefixAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Degree returns Degree:
		//    {Degree}
		//    'Degree'
		//    '{'
		//        ('prefix' prefix=Prefix)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Degree}
		//'Degree'
		//'{'
		//    ('prefix' prefix=Prefix)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{Degree}
		public Action getDegreeAction_0() { return cDegreeAction_0; }
		
		//'Degree'
		public Keyword getDegreeKeyword_1() { return cDegreeKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('prefix' prefix=Prefix)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'prefix'
		public Keyword getPrefixKeyword_3_0() { return cPrefixKeyword_3_0; }
		
		//prefix=Prefix
		public Assignment getPrefixAssignment_3_1() { return cPrefixAssignment_3_1; }
		
		//Prefix
		public RuleCall getPrefixPrefixParserRuleCall_3_1_0() { return cPrefixPrefixParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class MiliElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robotScript.RobotScript.Mili");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMiliAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cMiliKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Mili returns Mili:
		//    {Mili}
		//    'Mili'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{Mili}
		//'Mili'
		public Group getGroup() { return cGroup; }
		
		//{Mili}
		public Action getMiliAction_0() { return cMiliAction_0; }
		
		//'Mili'
		public Keyword getMiliKeyword_1() { return cMiliKeyword_1; }
	}
	public class CentiElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robotScript.RobotScript.Centi");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCentiAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCentiKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Centi returns Centi:
		//    {Centi}
		//    'Centi'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{Centi}
		//'Centi'
		public Group getGroup() { return cGroup; }
		
		//{Centi}
		public Action getCentiAction_0() { return cCentiAction_0; }
		
		//'Centi'
		public Keyword getCentiKeyword_1() { return cCentiKeyword_1; }
	}
	
	
	private final ModelElements pModel;
	private final CommandElements pCommand;
	private final BooleanElements pBoolean;
	private final ExpressionsElements pExpressions;
	private final UnitsElements pUnits;
	private final ArithmeticElements pArithmetic;
	private final PrefixElements pPrefix;
	private final RotationElements pRotation;
	private final LinearElements pLinear;
	private final ClockElements pClock;
	private final UltraSoundElements pUltraSound;
	private final SpeedElements pSpeed;
	private final LoopElements pLoop;
	private final SwitchElements pSwitch;
	private final DefVarElements pDefVar;
	private final BoolVariablesElements pBoolVariables;
	private final AndElements pAnd;
	private final OrElements pOr;
	private final NotElements pNot;
	private final BoolLiteralElements pBoolLiteral;
	private final EStringElements pEString;
	private final AddElements pAdd;
	private final AriLiteralElements pAriLiteral;
	private final AriVariablesElements pAriVariables;
	private final SubElements pSub;
	private final NegElements pNeg;
	private final MeterElements pMeter;
	private final SecondElements pSecond;
	private final DegreeElements pDegree;
	private final MiliElements pMili;
	private final CentiElements pCenti;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public RobotScriptGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pCommand = new CommandElements();
		this.pBoolean = new BooleanElements();
		this.pExpressions = new ExpressionsElements();
		this.pUnits = new UnitsElements();
		this.pArithmetic = new ArithmeticElements();
		this.pPrefix = new PrefixElements();
		this.pRotation = new RotationElements();
		this.pLinear = new LinearElements();
		this.pClock = new ClockElements();
		this.pUltraSound = new UltraSoundElements();
		this.pSpeed = new SpeedElements();
		this.pLoop = new LoopElements();
		this.pSwitch = new SwitchElements();
		this.pDefVar = new DefVarElements();
		this.pBoolVariables = new BoolVariablesElements();
		this.pAnd = new AndElements();
		this.pOr = new OrElements();
		this.pNot = new NotElements();
		this.pBoolLiteral = new BoolLiteralElements();
		this.pEString = new EStringElements();
		this.pAdd = new AddElements();
		this.pAriLiteral = new AriLiteralElements();
		this.pAriVariables = new AriVariablesElements();
		this.pSub = new SubElements();
		this.pNeg = new NegElements();
		this.pMeter = new MeterElements();
		this.pSecond = new SecondElements();
		this.pDegree = new DegreeElements();
		this.pMili = new MiliElements();
		this.pCenti = new CentiElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("robotScript.RobotScript".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model returns Model:
	//    {Model}
	//    'Model'
	//    '{'
	//        ('command' '{' command+=Command ( "," command+=Command)* '}' )?
	//    '}';
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Command returns Command:
	//    Rotation | Linear | Clock | UltraSound | Speed | Loop | Switch | DefVar;
	public CommandElements getCommandAccess() {
		return pCommand;
	}
	
	public ParserRule getCommandRule() {
		return getCommandAccess().getRule();
	}
	
	//Boolean returns Boolean:
	//    BoolVariables | And | Or | Not | BoolLiteral;
	public BooleanElements getBooleanAccess() {
		return pBoolean;
	}
	
	public ParserRule getBooleanRule() {
		return getBooleanAccess().getRule();
	}
	
	//Expressions returns Expressions:
	//    BoolVariables | And | Or | Not | BoolLiteral | Add | AriLiteral | AriVariables | Sub | Neg;
	public ExpressionsElements getExpressionsAccess() {
		return pExpressions;
	}
	
	public ParserRule getExpressionsRule() {
		return getExpressionsAccess().getRule();
	}
	
	//Units returns Units:
	//    Meter | Second | Degree;
	public UnitsElements getUnitsAccess() {
		return pUnits;
	}
	
	public ParserRule getUnitsRule() {
		return getUnitsAccess().getRule();
	}
	
	//Arithmetic returns Arithmetic:
	//    Add | AriLiteral | AriVariables | Sub | Neg;
	public ArithmeticElements getArithmeticAccess() {
		return pArithmetic;
	}
	
	public ParserRule getArithmeticRule() {
		return getArithmeticAccess().getRule();
	}
	
	//Prefix returns Prefix:
	//    Mili | Centi;
	public PrefixElements getPrefixAccess() {
		return pPrefix;
	}
	
	public ParserRule getPrefixRule() {
		return getPrefixAccess().getRule();
	}
	
	//Rotation returns Rotation:
	//    'Rotation'
	//    '{'
	//        'defvar' '{' defvar+=Command ( "," defvar+=Command)* '}'
	//    '}';
	public RotationElements getRotationAccess() {
		return pRotation;
	}
	
	public ParserRule getRotationRule() {
		return getRotationAccess().getRule();
	}
	
	//Linear returns Linear:
	//    'Linear'
	//    '{'
	//        'defvar' '{' defvar+=Command ( "," defvar+=Command)* '}'
	//    '}';
	public LinearElements getLinearAccess() {
		return pLinear;
	}
	
	public ParserRule getLinearRule() {
		return getLinearAccess().getRule();
	}
	
	//Clock returns Clock:
	//    'Clock'
	//    '{'
	//        'defvar' '{' defvar+=Command ( "," defvar+=Command)* '}'
	//    '}';
	public ClockElements getClockAccess() {
		return pClock;
	}
	
	public ParserRule getClockRule() {
		return getClockAccess().getRule();
	}
	
	//UltraSound returns UltraSound:
	//    'UltraSound'
	//    '{'
	//        'defvar' '{' defvar+=Command ( "," defvar+=Command)* '}'
	//    '}';
	public UltraSoundElements getUltraSoundAccess() {
		return pUltraSound;
	}
	
	public ParserRule getUltraSoundRule() {
		return getUltraSoundAccess().getRule();
	}
	
	//Speed returns Speed:
	//    'Speed'
	//    '{'
	//        'defvar' '{' defvar+=Command ( "," defvar+=Command)* '}'
	//    '}';
	public SpeedElements getSpeedAccess() {
		return pSpeed;
	}
	
	public ParserRule getSpeedRule() {
		return getSpeedAccess().getRule();
	}
	
	//Loop returns Loop:
	//    'Loop'
	//    '{'
	//        'loopCondition' loopCondition=Boolean
	//        'body' '{' body+=Command ( "," body+=Command)* '}'
	//    '}';
	public LoopElements getLoopAccess() {
		return pLoop;
	}
	
	public ParserRule getLoopRule() {
		return getLoopAccess().getRule();
	}
	
	//Switch returns Switch:
	//    'Switch'
	//    '{'
	//        'switchCondition' switchCondition=Boolean
	//        'body' '{' body+=Command ( "," body+=Command)* '}'
	//    '}';
	public SwitchElements getSwitchAccess() {
		return pSwitch;
	}
	
	public ParserRule getSwitchRule() {
		return getSwitchAccess().getRule();
	}
	
	//DefVar returns DefVar:
	//    'DefVar'
	//    name=EString
	//    '{'
	//        'expressions' expressions=Expressions
	//        ('units' units=Units)?
	//    '}';
	public DefVarElements getDefVarAccess() {
		return pDefVar;
	}
	
	public ParserRule getDefVarRule() {
		return getDefVarAccess().getRule();
	}
	
	//BoolVariables returns BoolVariables:
	//    'BoolVariables'
	//    '{'
	//        'reference' reference=[DefVar|EString]
	//    '}';
	public BoolVariablesElements getBoolVariablesAccess() {
		return pBoolVariables;
	}
	
	public ParserRule getBoolVariablesRule() {
		return getBoolVariablesAccess().getRule();
	}
	
	//And returns And:
	//    'And'
	//    '{'
	//        'left' left=Boolean
	//        'right' right=Boolean
	//    '}';
	public AndElements getAndAccess() {
		return pAnd;
	}
	
	public ParserRule getAndRule() {
		return getAndAccess().getRule();
	}
	
	//Or returns Or:
	//    'Or'
	//    '{'
	//        'left' left=Boolean
	//        'right' right=Boolean
	//    '}';
	public OrElements getOrAccess() {
		return pOr;
	}
	
	public ParserRule getOrRule() {
		return getOrAccess().getRule();
	}
	
	//Not returns Not:
	//    'Not'
	//    '{'
	//        'operand' operand=Boolean
	//    '}';
	public NotElements getNotAccess() {
		return pNot;
	}
	
	public ParserRule getNotRule() {
		return getNotAccess().getRule();
	}
	
	//BoolLiteral returns BoolLiteral:
	//    {BoolLiteral}
	//    'BoolLiteral'
	//    ;
	public BoolLiteralElements getBoolLiteralAccess() {
		return pBoolLiteral;
	}
	
	public ParserRule getBoolLiteralRule() {
		return getBoolLiteralAccess().getRule();
	}
	
	//EString returns ecore::EString:
	//    STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//Add returns Add:
	//    'Add'
	//    '{'
	//        'right' right=Arithmetic
	//        'left' left=Arithmetic
	//    '}';
	public AddElements getAddAccess() {
		return pAdd;
	}
	
	public ParserRule getAddRule() {
		return getAddAccess().getRule();
	}
	
	//AriLiteral returns AriLiteral:
	//    {AriLiteral}
	//    'AriLiteral'
	//    '{'
	//        ('units' units=Units)?
	//    '}';
	public AriLiteralElements getAriLiteralAccess() {
		return pAriLiteral;
	}
	
	public ParserRule getAriLiteralRule() {
		return getAriLiteralAccess().getRule();
	}
	
	//AriVariables returns AriVariables:
	//    'AriVariables'
	//    '{'
	//        'reference' reference=[DefVar|EString]
	//    '}';
	public AriVariablesElements getAriVariablesAccess() {
		return pAriVariables;
	}
	
	public ParserRule getAriVariablesRule() {
		return getAriVariablesAccess().getRule();
	}
	
	//Sub returns Sub:
	//    'Sub'
	//    '{'
	//        'right' right=Arithmetic
	//        'left' left=Arithmetic
	//    '}';
	public SubElements getSubAccess() {
		return pSub;
	}
	
	public ParserRule getSubRule() {
		return getSubAccess().getRule();
	}
	
	//Neg returns Neg:
	//    'Neg'
	//    '{'
	//        'operand' operand=Arithmetic
	//    '}';
	public NegElements getNegAccess() {
		return pNeg;
	}
	
	public ParserRule getNegRule() {
		return getNegAccess().getRule();
	}
	
	//Meter returns Meter:
	//    {Meter}
	//    'Meter'
	//    '{'
	//        ('prefix' prefix=Prefix)?
	//    '}';
	public MeterElements getMeterAccess() {
		return pMeter;
	}
	
	public ParserRule getMeterRule() {
		return getMeterAccess().getRule();
	}
	
	//Second returns Second:
	//    {Second}
	//    'Second'
	//    '{'
	//        ('prefix' prefix=Prefix)?
	//    '}';
	public SecondElements getSecondAccess() {
		return pSecond;
	}
	
	public ParserRule getSecondRule() {
		return getSecondAccess().getRule();
	}
	
	//Degree returns Degree:
	//    {Degree}
	//    'Degree'
	//    '{'
	//        ('prefix' prefix=Prefix)?
	//    '}';
	public DegreeElements getDegreeAccess() {
		return pDegree;
	}
	
	public ParserRule getDegreeRule() {
		return getDegreeAccess().getRule();
	}
	
	//Mili returns Mili:
	//    {Mili}
	//    'Mili'
	//    ;
	public MiliElements getMiliAccess() {
		return pMili;
	}
	
	public ParserRule getMiliRule() {
		return getMiliAccess().getRule();
	}
	
	//Centi returns Centi:
	//    {Centi}
	//    'Centi'
	//    ;
	public CentiElements getCentiAccess() {
		return pCenti;
	}
	
	public ParserRule getCentiRule() {
		return getCentiAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
