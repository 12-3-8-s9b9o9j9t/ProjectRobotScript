/*
 * generated by Xtext 2.32.0
 */
package robotScript.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class RobotScriptGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class EntryPointElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robotScript.RobotScript.EntryPoint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEntryPointAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEntryPointKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cFunctionsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cFunctionsAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cFunctionsFunctionDefParserRuleCall_3_2_0 = (RuleCall)cFunctionsAssignment_3_2.eContents().get(0);
		private final Group cGroup_3_3 = (Group)cGroup_3.eContents().get(3);
		private final Keyword cCommaKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Assignment cFunctionsAssignment_3_3_1 = (Assignment)cGroup_3_3.eContents().get(1);
		private final RuleCall cFunctionsFunctionDefParserRuleCall_3_3_1_0 = (RuleCall)cFunctionsAssignment_3_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//EntryPoint returns EntryPoint:
		//    {EntryPoint}
		//    'EntryPoint'
		//    '{'
		//        ('functions' '{' functions+=FunctionDef ( "," functions+=FunctionDef)* '}' )?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{EntryPoint}
		//'EntryPoint'
		//'{'
		//    ('functions' '{' functions+=FunctionDef ( "," functions+=FunctionDef)* '}' )?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{EntryPoint}
		public Action getEntryPointAction_0() { return cEntryPointAction_0; }
		
		//'EntryPoint'
		public Keyword getEntryPointKeyword_1() { return cEntryPointKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('functions' '{' functions+=FunctionDef ( "," functions+=FunctionDef)* '}' )?
		public Group getGroup_3() { return cGroup_3; }
		
		//'functions'
		public Keyword getFunctionsKeyword_3_0() { return cFunctionsKeyword_3_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_1() { return cLeftCurlyBracketKeyword_3_1; }
		
		//functions+=FunctionDef
		public Assignment getFunctionsAssignment_3_2() { return cFunctionsAssignment_3_2; }
		
		//FunctionDef
		public RuleCall getFunctionsFunctionDefParserRuleCall_3_2_0() { return cFunctionsFunctionDefParserRuleCall_3_2_0; }
		
		//( "," functions+=FunctionDef)*
		public Group getGroup_3_3() { return cGroup_3_3; }
		
		//","
		public Keyword getCommaKeyword_3_3_0() { return cCommaKeyword_3_3_0; }
		
		//functions+=FunctionDef
		public Assignment getFunctionsAssignment_3_3_1() { return cFunctionsAssignment_3_3_1; }
		
		//FunctionDef
		public RuleCall getFunctionsFunctionDefParserRuleCall_3_3_1_0() { return cFunctionsFunctionDefParserRuleCall_3_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_4() { return cRightCurlyBracketKeyword_3_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class AnyTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robotScript.RobotScript.AnyType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVoidTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDataTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AnyType returns AnyType:
		//    VoidType | DataType;
		@Override public ParserRule getRule() { return rule; }
		
		//VoidType | DataType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//VoidType
		public RuleCall getVoidTypeParserRuleCall_0() { return cVoidTypeParserRuleCall_0; }
		
		//DataType
		public RuleCall getDataTypeParserRuleCall_1() { return cDataTypeParserRuleCall_1; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robotScript.RobotScript.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAssignVarParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSetSpeedParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRotationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cLinearParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cFunCallParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cBlockParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cSimpleVarDeclParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cVarDeclInitParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cLoopStmtParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cIfStmtParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cReturnStmtParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		
		//Statement returns Statement:
		//    AssignVar | SetSpeed | Rotation | Linear | FunCall | Block | SimpleVarDecl | VarDeclInit | LoopStmt | IfStmt | ReturnStmt;
		@Override public ParserRule getRule() { return rule; }
		
		//AssignVar | SetSpeed | Rotation | Linear | FunCall | Block | SimpleVarDecl | VarDeclInit | LoopStmt | IfStmt | ReturnStmt
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AssignVar
		public RuleCall getAssignVarParserRuleCall_0() { return cAssignVarParserRuleCall_0; }
		
		//SetSpeed
		public RuleCall getSetSpeedParserRuleCall_1() { return cSetSpeedParserRuleCall_1; }
		
		//Rotation
		public RuleCall getRotationParserRuleCall_2() { return cRotationParserRuleCall_2; }
		
		//Linear
		public RuleCall getLinearParserRuleCall_3() { return cLinearParserRuleCall_3; }
		
		//FunCall
		public RuleCall getFunCallParserRuleCall_4() { return cFunCallParserRuleCall_4; }
		
		//Block
		public RuleCall getBlockParserRuleCall_5() { return cBlockParserRuleCall_5; }
		
		//SimpleVarDecl
		public RuleCall getSimpleVarDeclParserRuleCall_6() { return cSimpleVarDeclParserRuleCall_6; }
		
		//VarDeclInit
		public RuleCall getVarDeclInitParserRuleCall_7() { return cVarDeclInitParserRuleCall_7; }
		
		//LoopStmt
		public RuleCall getLoopStmtParserRuleCall_8() { return cLoopStmtParserRuleCall_8; }
		
		//IfStmt
		public RuleCall getIfStmtParserRuleCall_9() { return cIfStmtParserRuleCall_9; }
		
		//ReturnStmt
		public RuleCall getReturnStmtParserRuleCall_10() { return cReturnStmtParserRuleCall_10; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robotScript.RobotScript.Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAndParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAddParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cOrParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSensorParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cLiteralParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cSpeedParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cVariableParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cFunCallParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cNotParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cCompareParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cMulParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cAriUnOpParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		
		//Expression returns Expression:
		//    And | Add | Or | Sensor | Literal | Speed | Variable | FunCall | Not | Compare | Mul | AriUnOp;
		@Override public ParserRule getRule() { return rule; }
		
		//And | Add | Or | Sensor | Literal | Speed | Variable | FunCall | Not | Compare | Mul | AriUnOp
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//And
		public RuleCall getAndParserRuleCall_0() { return cAndParserRuleCall_0; }
		
		//Add
		public RuleCall getAddParserRuleCall_1() { return cAddParserRuleCall_1; }
		
		//Or
		public RuleCall getOrParserRuleCall_2() { return cOrParserRuleCall_2; }
		
		//Sensor
		public RuleCall getSensorParserRuleCall_3() { return cSensorParserRuleCall_3; }
		
		//Literal
		public RuleCall getLiteralParserRuleCall_4() { return cLiteralParserRuleCall_4; }
		
		//Speed
		public RuleCall getSpeedParserRuleCall_5() { return cSpeedParserRuleCall_5; }
		
		//Variable
		public RuleCall getVariableParserRuleCall_6() { return cVariableParserRuleCall_6; }
		
		//FunCall
		public RuleCall getFunCallParserRuleCall_7() { return cFunCallParserRuleCall_7; }
		
		//Not
		public RuleCall getNotParserRuleCall_8() { return cNotParserRuleCall_8; }
		
		//Compare
		public RuleCall getCompareParserRuleCall_9() { return cCompareParserRuleCall_9; }
		
		//Mul
		public RuleCall getMulParserRuleCall_10() { return cMulParserRuleCall_10; }
		
		//AriUnOp
		public RuleCall getAriUnOpParserRuleCall_11() { return cAriUnOpParserRuleCall_11; }
	}
	public class VarDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robotScript.RobotScript.VarDecl");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSimpleVarDeclParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVarDeclInitParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//VarDecl returns VarDecl:
		//    SimpleVarDecl | VarDeclInit;
		@Override public ParserRule getRule() { return rule; }
		
		//SimpleVarDecl | VarDeclInit
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SimpleVarDecl
		public RuleCall getSimpleVarDeclParserRuleCall_0() { return cSimpleVarDeclParserRuleCall_0; }
		
		//VarDeclInit
		public RuleCall getVarDeclInitParserRuleCall_1() { return cVarDeclInitParserRuleCall_1; }
	}
	public class PrimaryBoolExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robotScript.RobotScript.PrimaryBoolExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNotParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCompareParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//PrimaryBoolExpr returns PrimaryBoolExpr:
		//    Not | Compare;
		@Override public ParserRule getRule() { return rule; }
		
		//Not | Compare
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Not
		public RuleCall getNotParserRuleCall_0() { return cNotParserRuleCall_0; }
		
		//Compare
		public RuleCall getCompareParserRuleCall_1() { return cCompareParserRuleCall_1; }
	}
	public class PrimaryAriExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robotScript.RobotScript.PrimaryAriExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSensorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSpeedParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cVariableParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cFunCallParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cAriUnOpParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//PrimaryAriExpr returns PrimaryAriExpr:
		//    Sensor | Literal | Speed | Variable | FunCall | AriUnOp;
		@Override public ParserRule getRule() { return rule; }
		
		//Sensor | Literal | Speed | Variable | FunCall | AriUnOp
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Sensor
		public RuleCall getSensorParserRuleCall_0() { return cSensorParserRuleCall_0; }
		
		//Literal
		public RuleCall getLiteralParserRuleCall_1() { return cLiteralParserRuleCall_1; }
		
		//Speed
		public RuleCall getSpeedParserRuleCall_2() { return cSpeedParserRuleCall_2; }
		
		//Variable
		public RuleCall getVariableParserRuleCall_3() { return cVariableParserRuleCall_3; }
		
		//FunCall
		public RuleCall getFunCallParserRuleCall_4() { return cFunCallParserRuleCall_4; }
		
		//AriUnOp
		public RuleCall getAriUnOpParserRuleCall_5() { return cAriUnOpParserRuleCall_5; }
	}
	public class FunctionDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robotScript.RobotScript.FunctionDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFunctionDefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cReturnTypeKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cReturnTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cReturnTypeAnyTypeParserRuleCall_4_0 = (RuleCall)cReturnTypeAssignment_4.eContents().get(0);
		private final Keyword cBlockKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cBlockAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cBlockBlockParserRuleCall_6_0 = (RuleCall)cBlockAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cInputsKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cInputsAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cInputsSimpleVarDeclParserRuleCall_7_2_0 = (RuleCall)cInputsAssignment_7_2.eContents().get(0);
		private final Group cGroup_7_3 = (Group)cGroup_7.eContents().get(3);
		private final Keyword cCommaKeyword_7_3_0 = (Keyword)cGroup_7_3.eContents().get(0);
		private final Assignment cInputsAssignment_7_3_1 = (Assignment)cGroup_7_3.eContents().get(1);
		private final RuleCall cInputsSimpleVarDeclParserRuleCall_7_3_1_0 = (RuleCall)cInputsAssignment_7_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7_4 = (Keyword)cGroup_7.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//FunctionDef returns FunctionDef:
		//    'FunctionDef'
		//    name=EString
		//    '{'
		//        'returnType' returnType=AnyType
		//        'block' block=Block
		//        ('inputs' '{' inputs+=SimpleVarDecl ( "," inputs+=SimpleVarDecl)* '}' )?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'FunctionDef'
		//name=EString
		//'{'
		//    'returnType' returnType=AnyType
		//    'block' block=Block
		//    ('inputs' '{' inputs+=SimpleVarDecl ( "," inputs+=SimpleVarDecl)* '}' )?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'FunctionDef'
		public Keyword getFunctionDefKeyword_0() { return cFunctionDefKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'returnType'
		public Keyword getReturnTypeKeyword_3() { return cReturnTypeKeyword_3; }
		
		//returnType=AnyType
		public Assignment getReturnTypeAssignment_4() { return cReturnTypeAssignment_4; }
		
		//AnyType
		public RuleCall getReturnTypeAnyTypeParserRuleCall_4_0() { return cReturnTypeAnyTypeParserRuleCall_4_0; }
		
		//'block'
		public Keyword getBlockKeyword_5() { return cBlockKeyword_5; }
		
		//block=Block
		public Assignment getBlockAssignment_6() { return cBlockAssignment_6; }
		
		//Block
		public RuleCall getBlockBlockParserRuleCall_6_0() { return cBlockBlockParserRuleCall_6_0; }
		
		//('inputs' '{' inputs+=SimpleVarDecl ( "," inputs+=SimpleVarDecl)* '}' )?
		public Group getGroup_7() { return cGroup_7; }
		
		//'inputs'
		public Keyword getInputsKeyword_7_0() { return cInputsKeyword_7_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_7_1() { return cLeftCurlyBracketKeyword_7_1; }
		
		//inputs+=SimpleVarDecl
		public Assignment getInputsAssignment_7_2() { return cInputsAssignment_7_2; }
		
		//SimpleVarDecl
		public RuleCall getInputsSimpleVarDeclParserRuleCall_7_2_0() { return cInputsSimpleVarDeclParserRuleCall_7_2_0; }
		
		//( "," inputs+=SimpleVarDecl)*
		public Group getGroup_7_3() { return cGroup_7_3; }
		
		//","
		public Keyword getCommaKeyword_7_3_0() { return cCommaKeyword_7_3_0; }
		
		//inputs+=SimpleVarDecl
		public Assignment getInputsAssignment_7_3_1() { return cInputsAssignment_7_3_1; }
		
		//SimpleVarDecl
		public RuleCall getInputsSimpleVarDeclParserRuleCall_7_3_1_0() { return cInputsSimpleVarDeclParserRuleCall_7_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7_4() { return cRightCurlyBracketKeyword_7_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robotScript.RobotScript.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//    STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class BlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robotScript.RobotScript.Block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBlockKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cStmtsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cStmtsAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cStmtsStatementParserRuleCall_3_2_0 = (RuleCall)cStmtsAssignment_3_2.eContents().get(0);
		private final Group cGroup_3_3 = (Group)cGroup_3.eContents().get(3);
		private final Keyword cCommaKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Assignment cStmtsAssignment_3_3_1 = (Assignment)cGroup_3_3.eContents().get(1);
		private final RuleCall cStmtsStatementParserRuleCall_3_3_1_0 = (RuleCall)cStmtsAssignment_3_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Block returns Block:
		//    {Block}
		//    'Block'
		//    '{'
		//        ('stmts' '{' stmts+=Statement ( "," stmts+=Statement)* '}' )?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Block}
		//'Block'
		//'{'
		//    ('stmts' '{' stmts+=Statement ( "," stmts+=Statement)* '}' )?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{Block}
		public Action getBlockAction_0() { return cBlockAction_0; }
		
		//'Block'
		public Keyword getBlockKeyword_1() { return cBlockKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('stmts' '{' stmts+=Statement ( "," stmts+=Statement)* '}' )?
		public Group getGroup_3() { return cGroup_3; }
		
		//'stmts'
		public Keyword getStmtsKeyword_3_0() { return cStmtsKeyword_3_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_1() { return cLeftCurlyBracketKeyword_3_1; }
		
		//stmts+=Statement
		public Assignment getStmtsAssignment_3_2() { return cStmtsAssignment_3_2; }
		
		//Statement
		public RuleCall getStmtsStatementParserRuleCall_3_2_0() { return cStmtsStatementParserRuleCall_3_2_0; }
		
		//( "," stmts+=Statement)*
		public Group getGroup_3_3() { return cGroup_3_3; }
		
		//","
		public Keyword getCommaKeyword_3_3_0() { return cCommaKeyword_3_3_0; }
		
		//stmts+=Statement
		public Assignment getStmtsAssignment_3_3_1() { return cStmtsAssignment_3_3_1; }
		
		//Statement
		public RuleCall getStmtsStatementParserRuleCall_3_3_1_0() { return cStmtsStatementParserRuleCall_3_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_4() { return cRightCurlyBracketKeyword_3_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class SimpleVarDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robotScript.RobotScript.SimpleVarDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSimpleVarDeclKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cTypeKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTypeDataTypeParserRuleCall_4_0 = (RuleCall)cTypeAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//SimpleVarDecl returns SimpleVarDecl:
		//    'SimpleVarDecl'
		//    name=EString
		//    '{'
		//        'type' type=DataType
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'SimpleVarDecl'
		//name=EString
		//'{'
		//    'type' type=DataType
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'SimpleVarDecl'
		public Keyword getSimpleVarDeclKeyword_0() { return cSimpleVarDeclKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'type'
		public Keyword getTypeKeyword_3() { return cTypeKeyword_3; }
		
		//type=DataType
		public Assignment getTypeAssignment_4() { return cTypeAssignment_4; }
		
		//DataType
		public RuleCall getTypeDataTypeParserRuleCall_4_0() { return cTypeDataTypeParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class VoidTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robotScript.RobotScript.VoidType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVoidTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cVoidTypeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//VoidType returns VoidType:
		//    {VoidType}
		//    'VoidType'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{VoidType}
		//'VoidType'
		public Group getGroup() { return cGroup; }
		
		//{VoidType}
		public Action getVoidTypeAction_0() { return cVoidTypeAction_0; }
		
		//'VoidType'
		public Keyword getVoidTypeKeyword_1() { return cVoidTypeKeyword_1; }
	}
	public class DataTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robotScript.RobotScript.DataType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDataTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDataTypeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//DataType returns DataType:
		//    {DataType}
		//    'DataType'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{DataType}
		//'DataType'
		public Group getGroup() { return cGroup; }
		
		//{DataType}
		public Action getDataTypeAction_0() { return cDataTypeAction_0; }
		
		//'DataType'
		public Keyword getDataTypeKeyword_1() { return cDataTypeKeyword_1; }
	}
	public class AssignVarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robotScript.RobotScript.AssignVar");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAssignVarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cVarKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cVarAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cVarVarDeclCrossReference_3_0 = (CrossReference)cVarAssignment_3.eContents().get(0);
		private final RuleCall cVarVarDeclEStringParserRuleCall_3_0_1 = (RuleCall)cVarVarDeclCrossReference_3_0.eContents().get(1);
		private final Keyword cExprKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cExprAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cExprExpressionParserRuleCall_5_0 = (RuleCall)cExprAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//AssignVar returns AssignVar:
		//    'AssignVar'
		//    '{'
		//        'var' var=[VarDecl|EString]
		//        'expr' expr=Expression
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'AssignVar'
		//'{'
		//    'var' var=[VarDecl|EString]
		//    'expr' expr=Expression
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'AssignVar'
		public Keyword getAssignVarKeyword_0() { return cAssignVarKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'var'
		public Keyword getVarKeyword_2() { return cVarKeyword_2; }
		
		//var=[VarDecl|EString]
		public Assignment getVarAssignment_3() { return cVarAssignment_3; }
		
		//[VarDecl|EString]
		public CrossReference getVarVarDeclCrossReference_3_0() { return cVarVarDeclCrossReference_3_0; }
		
		//EString
		public RuleCall getVarVarDeclEStringParserRuleCall_3_0_1() { return cVarVarDeclEStringParserRuleCall_3_0_1; }
		
		//'expr'
		public Keyword getExprKeyword_4() { return cExprKeyword_4; }
		
		//expr=Expression
		public Assignment getExprAssignment_5() { return cExprAssignment_5; }
		
		//Expression
		public RuleCall getExprExpressionParserRuleCall_5_0() { return cExprExpressionParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class SetSpeedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robotScript.RobotScript.SetSpeed");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSetSpeedKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cUnitKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cUnitAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cUnitUnitEnumRuleCall_2_1_0 = (RuleCall)cUnitAssignment_2_1.eContents().get(0);
		private final Keyword cExprKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExprAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExprExpressionParserRuleCall_4_0 = (RuleCall)cExprAssignment_4.eContents().get(0);
		private final Keyword cSpeedKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cSpeedAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cSpeedSpeedParserRuleCall_6_0 = (RuleCall)cSpeedAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//SetSpeed returns SetSpeed:
		//    'SetSpeed'
		//    '{'
		//        ('unit' unit=Unit)?
		//        'expr' expr=Expression
		//        'speed' speed=Speed
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'SetSpeed'
		//'{'
		//    ('unit' unit=Unit)?
		//    'expr' expr=Expression
		//    'speed' speed=Speed
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'SetSpeed'
		public Keyword getSetSpeedKeyword_0() { return cSetSpeedKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//('unit' unit=Unit)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'unit'
		public Keyword getUnitKeyword_2_0() { return cUnitKeyword_2_0; }
		
		//unit=Unit
		public Assignment getUnitAssignment_2_1() { return cUnitAssignment_2_1; }
		
		//Unit
		public RuleCall getUnitUnitEnumRuleCall_2_1_0() { return cUnitUnitEnumRuleCall_2_1_0; }
		
		//'expr'
		public Keyword getExprKeyword_3() { return cExprKeyword_3; }
		
		//expr=Expression
		public Assignment getExprAssignment_4() { return cExprAssignment_4; }
		
		//Expression
		public RuleCall getExprExpressionParserRuleCall_4_0() { return cExprExpressionParserRuleCall_4_0; }
		
		//'speed'
		public Keyword getSpeedKeyword_5() { return cSpeedKeyword_5; }
		
		//speed=Speed
		public Assignment getSpeedAssignment_6() { return cSpeedAssignment_6; }
		
		//Speed
		public RuleCall getSpeedSpeedParserRuleCall_6_0() { return cSpeedSpeedParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class RotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robotScript.RobotScript.Rotation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRotationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cExprKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExprAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExprExpressionParserRuleCall_3_0 = (RuleCall)cExprAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Rotation returns Rotation:
		//    'Rotation'
		//    '{'
		//        'expr' expr=Expression
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Rotation'
		//'{'
		//    'expr' expr=Expression
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Rotation'
		public Keyword getRotationKeyword_0() { return cRotationKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'expr'
		public Keyword getExprKeyword_2() { return cExprKeyword_2; }
		
		//expr=Expression
		public Assignment getExprAssignment_3() { return cExprAssignment_3; }
		
		//Expression
		public RuleCall getExprExpressionParserRuleCall_3_0() { return cExprExpressionParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class LinearElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robotScript.RobotScript.Linear");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLinearKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cUnitKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cUnitAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cUnitUnitEnumRuleCall_2_1_0 = (RuleCall)cUnitAssignment_2_1.eContents().get(0);
		private final Keyword cExprKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExprAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExprExpressionParserRuleCall_4_0 = (RuleCall)cExprAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Linear returns Linear:
		//    'Linear'
		//    '{'
		//        ('unit' unit=Unit)?
		//        'expr' expr=Expression
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Linear'
		//'{'
		//    ('unit' unit=Unit)?
		//    'expr' expr=Expression
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Linear'
		public Keyword getLinearKeyword_0() { return cLinearKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//('unit' unit=Unit)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'unit'
		public Keyword getUnitKeyword_2_0() { return cUnitKeyword_2_0; }
		
		//unit=Unit
		public Assignment getUnitAssignment_2_1() { return cUnitAssignment_2_1; }
		
		//Unit
		public RuleCall getUnitUnitEnumRuleCall_2_1_0() { return cUnitUnitEnumRuleCall_2_1_0; }
		
		//'expr'
		public Keyword getExprKeyword_3() { return cExprKeyword_3; }
		
		//expr=Expression
		public Assignment getExprAssignment_4() { return cExprAssignment_4; }
		
		//Expression
		public RuleCall getExprExpressionParserRuleCall_4_0() { return cExprExpressionParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class FunCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robotScript.RobotScript.FunCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFunCallKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cFunKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFunAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cFunFunctionDefCrossReference_3_0 = (CrossReference)cFunAssignment_3.eContents().get(0);
		private final RuleCall cFunFunctionDefEStringParserRuleCall_3_0_1 = (RuleCall)cFunFunctionDefCrossReference_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cInputsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cInputsAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cInputsExpressionParserRuleCall_4_2_0 = (RuleCall)cInputsAssignment_4_2.eContents().get(0);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cCommaKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cInputsAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final RuleCall cInputsExpressionParserRuleCall_4_3_1_0 = (RuleCall)cInputsAssignment_4_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//FunCall returns FunCall:
		//    'FunCall'
		//    '{'
		//        'fun' fun=[FunctionDef|EString]
		//        ('inputs' '{' inputs+=Expression ( "," inputs+=Expression)* '}' )?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'FunCall'
		//'{'
		//    'fun' fun=[FunctionDef|EString]
		//    ('inputs' '{' inputs+=Expression ( "," inputs+=Expression)* '}' )?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'FunCall'
		public Keyword getFunCallKeyword_0() { return cFunCallKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'fun'
		public Keyword getFunKeyword_2() { return cFunKeyword_2; }
		
		//fun=[FunctionDef|EString]
		public Assignment getFunAssignment_3() { return cFunAssignment_3; }
		
		//[FunctionDef|EString]
		public CrossReference getFunFunctionDefCrossReference_3_0() { return cFunFunctionDefCrossReference_3_0; }
		
		//EString
		public RuleCall getFunFunctionDefEStringParserRuleCall_3_0_1() { return cFunFunctionDefEStringParserRuleCall_3_0_1; }
		
		//('inputs' '{' inputs+=Expression ( "," inputs+=Expression)* '}' )?
		public Group getGroup_4() { return cGroup_4; }
		
		//'inputs'
		public Keyword getInputsKeyword_4_0() { return cInputsKeyword_4_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_1() { return cLeftCurlyBracketKeyword_4_1; }
		
		//inputs+=Expression
		public Assignment getInputsAssignment_4_2() { return cInputsAssignment_4_2; }
		
		//Expression
		public RuleCall getInputsExpressionParserRuleCall_4_2_0() { return cInputsExpressionParserRuleCall_4_2_0; }
		
		//( "," inputs+=Expression)*
		public Group getGroup_4_3() { return cGroup_4_3; }
		
		//","
		public Keyword getCommaKeyword_4_3_0() { return cCommaKeyword_4_3_0; }
		
		//inputs+=Expression
		public Assignment getInputsAssignment_4_3_1() { return cInputsAssignment_4_3_1; }
		
		//Expression
		public RuleCall getInputsExpressionParserRuleCall_4_3_1_0() { return cInputsExpressionParserRuleCall_4_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_4() { return cRightCurlyBracketKeyword_4_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class VarDeclInitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robotScript.RobotScript.VarDeclInit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarDeclInitKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cTypeKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTypeDataTypeParserRuleCall_4_0 = (RuleCall)cTypeAssignment_4.eContents().get(0);
		private final Keyword cExprKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cExprAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cExprExpressionParserRuleCall_6_0 = (RuleCall)cExprAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//VarDeclInit returns VarDeclInit:
		//    'VarDeclInit'
		//    name=EString
		//    '{'
		//        'type' type=DataType
		//        'expr' expr=Expression
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'VarDeclInit'
		//name=EString
		//'{'
		//    'type' type=DataType
		//    'expr' expr=Expression
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'VarDeclInit'
		public Keyword getVarDeclInitKeyword_0() { return cVarDeclInitKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'type'
		public Keyword getTypeKeyword_3() { return cTypeKeyword_3; }
		
		//type=DataType
		public Assignment getTypeAssignment_4() { return cTypeAssignment_4; }
		
		//DataType
		public RuleCall getTypeDataTypeParserRuleCall_4_0() { return cTypeDataTypeParserRuleCall_4_0; }
		
		//'expr'
		public Keyword getExprKeyword_5() { return cExprKeyword_5; }
		
		//expr=Expression
		public Assignment getExprAssignment_6() { return cExprAssignment_6; }
		
		//Expression
		public RuleCall getExprExpressionParserRuleCall_6_0() { return cExprExpressionParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class LoopStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robotScript.RobotScript.LoopStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLoopStmtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cExprKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExprAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExprExpressionParserRuleCall_3_0 = (RuleCall)cExprAssignment_3.eContents().get(0);
		private final Keyword cStmtKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cStmtAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStmtStatementParserRuleCall_5_0 = (RuleCall)cStmtAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//LoopStmt returns LoopStmt:
		//    'LoopStmt'
		//    '{'
		//        'expr' expr=Expression
		//        'stmt' stmt=Statement
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'LoopStmt'
		//'{'
		//    'expr' expr=Expression
		//    'stmt' stmt=Statement
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'LoopStmt'
		public Keyword getLoopStmtKeyword_0() { return cLoopStmtKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'expr'
		public Keyword getExprKeyword_2() { return cExprKeyword_2; }
		
		//expr=Expression
		public Assignment getExprAssignment_3() { return cExprAssignment_3; }
		
		//Expression
		public RuleCall getExprExpressionParserRuleCall_3_0() { return cExprExpressionParserRuleCall_3_0; }
		
		//'stmt'
		public Keyword getStmtKeyword_4() { return cStmtKeyword_4; }
		
		//stmt=Statement
		public Assignment getStmtAssignment_5() { return cStmtAssignment_5; }
		
		//Statement
		public RuleCall getStmtStatementParserRuleCall_5_0() { return cStmtStatementParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class IfStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robotScript.RobotScript.IfStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfStmtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cExprKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExprAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExprExpressionParserRuleCall_3_0 = (RuleCall)cExprAssignment_3.eContents().get(0);
		private final Keyword cIfstmtKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cIfstmtAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cIfstmtStatementParserRuleCall_5_0 = (RuleCall)cIfstmtAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cElsestmtKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cElsestmtAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cElsestmtStatementParserRuleCall_6_1_0 = (RuleCall)cElsestmtAssignment_6_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//IfStmt returns IfStmt:
		//    'IfStmt'
		//    '{'
		//        'expr' expr=Expression
		//        'ifstmt' ifstmt=Statement
		//        ('elsestmt' elsestmt=Statement)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'IfStmt'
		//'{'
		//    'expr' expr=Expression
		//    'ifstmt' ifstmt=Statement
		//    ('elsestmt' elsestmt=Statement)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'IfStmt'
		public Keyword getIfStmtKeyword_0() { return cIfStmtKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'expr'
		public Keyword getExprKeyword_2() { return cExprKeyword_2; }
		
		//expr=Expression
		public Assignment getExprAssignment_3() { return cExprAssignment_3; }
		
		//Expression
		public RuleCall getExprExpressionParserRuleCall_3_0() { return cExprExpressionParserRuleCall_3_0; }
		
		//'ifstmt'
		public Keyword getIfstmtKeyword_4() { return cIfstmtKeyword_4; }
		
		//ifstmt=Statement
		public Assignment getIfstmtAssignment_5() { return cIfstmtAssignment_5; }
		
		//Statement
		public RuleCall getIfstmtStatementParserRuleCall_5_0() { return cIfstmtStatementParserRuleCall_5_0; }
		
		//('elsestmt' elsestmt=Statement)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'elsestmt'
		public Keyword getElsestmtKeyword_6_0() { return cElsestmtKeyword_6_0; }
		
		//elsestmt=Statement
		public Assignment getElsestmtAssignment_6_1() { return cElsestmtAssignment_6_1; }
		
		//Statement
		public RuleCall getElsestmtStatementParserRuleCall_6_1_0() { return cElsestmtStatementParserRuleCall_6_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class ReturnStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robotScript.RobotScript.ReturnStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cReturnStmtAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cReturnStmtKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cExprKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cExprAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cExprExpressionParserRuleCall_3_1_0 = (RuleCall)cExprAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ReturnStmt returns ReturnStmt:
		//    {ReturnStmt}
		//    'ReturnStmt'
		//    '{'
		//        ('expr' expr=Expression)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{ReturnStmt}
		//'ReturnStmt'
		//'{'
		//    ('expr' expr=Expression)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{ReturnStmt}
		public Action getReturnStmtAction_0() { return cReturnStmtAction_0; }
		
		//'ReturnStmt'
		public Keyword getReturnStmtKeyword_1() { return cReturnStmtKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('expr' expr=Expression)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'expr'
		public Keyword getExprKeyword_3_0() { return cExprKeyword_3_0; }
		
		//expr=Expression
		public Assignment getExprAssignment_3_1() { return cExprAssignment_3_1; }
		
		//Expression
		public RuleCall getExprExpressionParserRuleCall_3_1_0() { return cExprExpressionParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class AndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robotScript.RobotScript.And");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAndKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cExprsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExprsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExprsPrimaryBoolExprParserRuleCall_4_0 = (RuleCall)cExprsAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cExprsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cExprsPrimaryBoolExprParserRuleCall_5_1_0 = (RuleCall)cExprsAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//And returns And:
		//    'And'
		//    '{'
		//        'exprs' '{' exprs+=PrimaryBoolExpr ( "," exprs+=PrimaryBoolExpr)* '}'
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'And'
		//'{'
		//    'exprs' '{' exprs+=PrimaryBoolExpr ( "," exprs+=PrimaryBoolExpr)* '}'
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'And'
		public Keyword getAndKeyword_0() { return cAndKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'exprs'
		public Keyword getExprsKeyword_2() { return cExprsKeyword_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//exprs+=PrimaryBoolExpr
		public Assignment getExprsAssignment_4() { return cExprsAssignment_4; }
		
		//PrimaryBoolExpr
		public RuleCall getExprsPrimaryBoolExprParserRuleCall_4_0() { return cExprsPrimaryBoolExprParserRuleCall_4_0; }
		
		//( "," exprs+=PrimaryBoolExpr)*
		public Group getGroup_5() { return cGroup_5; }
		
		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//exprs+=PrimaryBoolExpr
		public Assignment getExprsAssignment_5_1() { return cExprsAssignment_5_1; }
		
		//PrimaryBoolExpr
		public RuleCall getExprsPrimaryBoolExprParserRuleCall_5_1_0() { return cExprsPrimaryBoolExprParserRuleCall_5_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class AddElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robotScript.RobotScript.Add");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAddKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cExprsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExprsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExprsMulParserRuleCall_4_0 = (RuleCall)cExprsAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cExprsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cExprsMulParserRuleCall_5_1_0 = (RuleCall)cExprsAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Add returns Add:
		//    'Add'
		//    '{'
		//        'exprs' '{' exprs+=Mul ( "," exprs+=Mul)* '}'
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Add'
		//'{'
		//    'exprs' '{' exprs+=Mul ( "," exprs+=Mul)* '}'
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Add'
		public Keyword getAddKeyword_0() { return cAddKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'exprs'
		public Keyword getExprsKeyword_2() { return cExprsKeyword_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//exprs+=Mul
		public Assignment getExprsAssignment_4() { return cExprsAssignment_4; }
		
		//Mul
		public RuleCall getExprsMulParserRuleCall_4_0() { return cExprsMulParserRuleCall_4_0; }
		
		//( "," exprs+=Mul)*
		public Group getGroup_5() { return cGroup_5; }
		
		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//exprs+=Mul
		public Assignment getExprsAssignment_5_1() { return cExprsAssignment_5_1; }
		
		//Mul
		public RuleCall getExprsMulParserRuleCall_5_1_0() { return cExprsMulParserRuleCall_5_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class OrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robotScript.RobotScript.Or");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOrKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cExprsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExprsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExprsAndParserRuleCall_4_0 = (RuleCall)cExprsAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cExprsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cExprsAndParserRuleCall_5_1_0 = (RuleCall)cExprsAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Or returns Or:
		//    'Or'
		//    '{'
		//        'exprs' '{' exprs+=And ( "," exprs+=And)* '}'
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Or'
		//'{'
		//    'exprs' '{' exprs+=And ( "," exprs+=And)* '}'
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Or'
		public Keyword getOrKeyword_0() { return cOrKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'exprs'
		public Keyword getExprsKeyword_2() { return cExprsKeyword_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//exprs+=And
		public Assignment getExprsAssignment_4() { return cExprsAssignment_4; }
		
		//And
		public RuleCall getExprsAndParserRuleCall_4_0() { return cExprsAndParserRuleCall_4_0; }
		
		//( "," exprs+=And)*
		public Group getGroup_5() { return cGroup_5; }
		
		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//exprs+=And
		public Assignment getExprsAssignment_5_1() { return cExprsAssignment_5_1; }
		
		//And
		public RuleCall getExprsAndParserRuleCall_5_1_0() { return cExprsAndParserRuleCall_5_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class SensorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robotScript.RobotScript.Sensor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSensorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSensorKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Sensor returns Sensor:
		//    {Sensor}
		//    'Sensor'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{Sensor}
		//'Sensor'
		public Group getGroup() { return cGroup; }
		
		//{Sensor}
		public Action getSensorAction_0() { return cSensorAction_0; }
		
		//'Sensor'
		public Keyword getSensorKeyword_1() { return cSensorKeyword_1; }
	}
	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robotScript.RobotScript.Literal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLiteralKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Literal returns Literal:
		//    {Literal}
		//    'Literal'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{Literal}
		//'Literal'
		public Group getGroup() { return cGroup; }
		
		//{Literal}
		public Action getLiteralAction_0() { return cLiteralAction_0; }
		
		//'Literal'
		public Keyword getLiteralKeyword_1() { return cLiteralKeyword_1; }
	}
	public class SpeedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robotScript.RobotScript.Speed");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSpeedAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSpeedKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Speed returns Speed:
		//    {Speed}
		//    'Speed'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{Speed}
		//'Speed'
		public Group getGroup() { return cGroup; }
		
		//{Speed}
		public Action getSpeedAction_0() { return cSpeedAction_0; }
		
		//'Speed'
		public Keyword getSpeedKeyword_1() { return cSpeedKeyword_1; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robotScript.RobotScript.Variable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVariableKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cVarKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cVarAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cVarVarDeclCrossReference_3_0 = (CrossReference)cVarAssignment_3.eContents().get(0);
		private final RuleCall cVarVarDeclEStringParserRuleCall_3_0_1 = (RuleCall)cVarVarDeclCrossReference_3_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Variable returns Variable:
		//    'Variable'
		//    '{'
		//        'var' var=[VarDecl|EString]
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Variable'
		//'{'
		//    'var' var=[VarDecl|EString]
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Variable'
		public Keyword getVariableKeyword_0() { return cVariableKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'var'
		public Keyword getVarKeyword_2() { return cVarKeyword_2; }
		
		//var=[VarDecl|EString]
		public Assignment getVarAssignment_3() { return cVarAssignment_3; }
		
		//[VarDecl|EString]
		public CrossReference getVarVarDeclCrossReference_3_0() { return cVarVarDeclCrossReference_3_0; }
		
		//EString
		public RuleCall getVarVarDeclEStringParserRuleCall_3_0_1() { return cVarVarDeclEStringParserRuleCall_3_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class NotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robotScript.RobotScript.Not");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNotKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cExprKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExprAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExprCompareParserRuleCall_3_0 = (RuleCall)cExprAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Not returns Not:
		//    'Not'
		//    '{'
		//        'expr' expr=Compare
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Not'
		//'{'
		//    'expr' expr=Compare
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Not'
		public Keyword getNotKeyword_0() { return cNotKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'expr'
		public Keyword getExprKeyword_2() { return cExprKeyword_2; }
		
		//expr=Compare
		public Assignment getExprAssignment_3() { return cExprAssignment_3; }
		
		//Compare
		public RuleCall getExprCompareParserRuleCall_3_0() { return cExprCompareParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class CompareElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robotScript.RobotScript.Compare");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCompareKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cExprsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExprsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExprsAddParserRuleCall_4_0 = (RuleCall)cExprsAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cExprsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cExprsAddParserRuleCall_5_1_0 = (RuleCall)cExprsAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Compare returns Compare:
		//    'Compare'
		//    '{'
		//        'exprs' '{' exprs+=Add ( "," exprs+=Add)* '}'
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Compare'
		//'{'
		//    'exprs' '{' exprs+=Add ( "," exprs+=Add)* '}'
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Compare'
		public Keyword getCompareKeyword_0() { return cCompareKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'exprs'
		public Keyword getExprsKeyword_2() { return cExprsKeyword_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//exprs+=Add
		public Assignment getExprsAssignment_4() { return cExprsAssignment_4; }
		
		//Add
		public RuleCall getExprsAddParserRuleCall_4_0() { return cExprsAddParserRuleCall_4_0; }
		
		//( "," exprs+=Add)*
		public Group getGroup_5() { return cGroup_5; }
		
		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//exprs+=Add
		public Assignment getExprsAssignment_5_1() { return cExprsAssignment_5_1; }
		
		//Add
		public RuleCall getExprsAddParserRuleCall_5_1_0() { return cExprsAddParserRuleCall_5_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class MulElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robotScript.RobotScript.Mul");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMulKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cExprsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExprsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExprsPrimaryAriExprParserRuleCall_4_0 = (RuleCall)cExprsAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cExprsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cExprsPrimaryAriExprParserRuleCall_5_1_0 = (RuleCall)cExprsAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Mul returns Mul:
		//    'Mul'
		//    '{'
		//        'exprs' '{' exprs+=PrimaryAriExpr ( "," exprs+=PrimaryAriExpr)* '}'
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Mul'
		//'{'
		//    'exprs' '{' exprs+=PrimaryAriExpr ( "," exprs+=PrimaryAriExpr)* '}'
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Mul'
		public Keyword getMulKeyword_0() { return cMulKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'exprs'
		public Keyword getExprsKeyword_2() { return cExprsKeyword_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//exprs+=PrimaryAriExpr
		public Assignment getExprsAssignment_4() { return cExprsAssignment_4; }
		
		//PrimaryAriExpr
		public RuleCall getExprsPrimaryAriExprParserRuleCall_4_0() { return cExprsPrimaryAriExprParserRuleCall_4_0; }
		
		//( "," exprs+=PrimaryAriExpr)*
		public Group getGroup_5() { return cGroup_5; }
		
		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//exprs+=PrimaryAriExpr
		public Assignment getExprsAssignment_5_1() { return cExprsAssignment_5_1; }
		
		//PrimaryAriExpr
		public RuleCall getExprsPrimaryAriExprParserRuleCall_5_1_0() { return cExprsPrimaryAriExprParserRuleCall_5_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class AriUnOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robotScript.RobotScript.AriUnOp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAriUnOpKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cExprKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExprAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExprExpressionParserRuleCall_3_0 = (RuleCall)cExprAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//AriUnOp returns AriUnOp:
		//    'AriUnOp'
		//    '{'
		//        'expr' expr=Expression
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'AriUnOp'
		//'{'
		//    'expr' expr=Expression
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'AriUnOp'
		public Keyword getAriUnOpKeyword_0() { return cAriUnOpKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'expr'
		public Keyword getExprKeyword_2() { return cExprKeyword_2; }
		
		//expr=Expression
		public Assignment getExprAssignment_3() { return cExprAssignment_3; }
		
		//Expression
		public RuleCall getExprExpressionParserRuleCall_3_0() { return cExprExpressionParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	
	public class UnitElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "robotScript.RobotScript.Unit");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cMEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cMMKeyword_0_0 = (Keyword)cMEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDmEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDmDmKeyword_1_0 = (Keyword)cDmEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cCmEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cCmCmKeyword_2_0 = (Keyword)cCmEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cMmEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cMmMmKeyword_3_0 = (Keyword)cMmEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum Unit returns Unit:
		//                m = 'm' | dm = 'dm' | cm = 'cm' | mm = 'mm';
		public EnumRule getRule() { return rule; }
		
		//m = 'm' | dm = 'dm' | cm = 'cm' | mm = 'mm'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//m = 'm'
		public EnumLiteralDeclaration getMEnumLiteralDeclaration_0() { return cMEnumLiteralDeclaration_0; }
		
		//'m'
		public Keyword getMMKeyword_0_0() { return cMMKeyword_0_0; }
		
		//dm = 'dm'
		public EnumLiteralDeclaration getDmEnumLiteralDeclaration_1() { return cDmEnumLiteralDeclaration_1; }
		
		//'dm'
		public Keyword getDmDmKeyword_1_0() { return cDmDmKeyword_1_0; }
		
		//cm = 'cm'
		public EnumLiteralDeclaration getCmEnumLiteralDeclaration_2() { return cCmEnumLiteralDeclaration_2; }
		
		//'cm'
		public Keyword getCmCmKeyword_2_0() { return cCmCmKeyword_2_0; }
		
		//mm = 'mm'
		public EnumLiteralDeclaration getMmEnumLiteralDeclaration_3() { return cMmEnumLiteralDeclaration_3; }
		
		//'mm'
		public Keyword getMmMmKeyword_3_0() { return cMmMmKeyword_3_0; }
	}
	
	private final EntryPointElements pEntryPoint;
	private final AnyTypeElements pAnyType;
	private final StatementElements pStatement;
	private final ExpressionElements pExpression;
	private final VarDeclElements pVarDecl;
	private final PrimaryBoolExprElements pPrimaryBoolExpr;
	private final PrimaryAriExprElements pPrimaryAriExpr;
	private final FunctionDefElements pFunctionDef;
	private final EStringElements pEString;
	private final BlockElements pBlock;
	private final SimpleVarDeclElements pSimpleVarDecl;
	private final VoidTypeElements pVoidType;
	private final DataTypeElements pDataType;
	private final AssignVarElements pAssignVar;
	private final SetSpeedElements pSetSpeed;
	private final RotationElements pRotation;
	private final LinearElements pLinear;
	private final FunCallElements pFunCall;
	private final VarDeclInitElements pVarDeclInit;
	private final LoopStmtElements pLoopStmt;
	private final IfStmtElements pIfStmt;
	private final ReturnStmtElements pReturnStmt;
	private final AndElements pAnd;
	private final AddElements pAdd;
	private final OrElements pOr;
	private final SensorElements pSensor;
	private final LiteralElements pLiteral;
	private final SpeedElements pSpeed;
	private final VariableElements pVariable;
	private final NotElements pNot;
	private final CompareElements pCompare;
	private final MulElements pMul;
	private final AriUnOpElements pAriUnOp;
	private final UnitElements eUnit;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public RobotScriptGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pEntryPoint = new EntryPointElements();
		this.pAnyType = new AnyTypeElements();
		this.pStatement = new StatementElements();
		this.pExpression = new ExpressionElements();
		this.pVarDecl = new VarDeclElements();
		this.pPrimaryBoolExpr = new PrimaryBoolExprElements();
		this.pPrimaryAriExpr = new PrimaryAriExprElements();
		this.pFunctionDef = new FunctionDefElements();
		this.pEString = new EStringElements();
		this.pBlock = new BlockElements();
		this.pSimpleVarDecl = new SimpleVarDeclElements();
		this.pVoidType = new VoidTypeElements();
		this.pDataType = new DataTypeElements();
		this.pAssignVar = new AssignVarElements();
		this.pSetSpeed = new SetSpeedElements();
		this.pRotation = new RotationElements();
		this.pLinear = new LinearElements();
		this.pFunCall = new FunCallElements();
		this.pVarDeclInit = new VarDeclInitElements();
		this.pLoopStmt = new LoopStmtElements();
		this.pIfStmt = new IfStmtElements();
		this.pReturnStmt = new ReturnStmtElements();
		this.pAnd = new AndElements();
		this.pAdd = new AddElements();
		this.pOr = new OrElements();
		this.pSensor = new SensorElements();
		this.pLiteral = new LiteralElements();
		this.pSpeed = new SpeedElements();
		this.pVariable = new VariableElements();
		this.pNot = new NotElements();
		this.pCompare = new CompareElements();
		this.pMul = new MulElements();
		this.pAriUnOp = new AriUnOpElements();
		this.eUnit = new UnitElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("robotScript.RobotScript".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//EntryPoint returns EntryPoint:
	//    {EntryPoint}
	//    'EntryPoint'
	//    '{'
	//        ('functions' '{' functions+=FunctionDef ( "," functions+=FunctionDef)* '}' )?
	//    '}';
	public EntryPointElements getEntryPointAccess() {
		return pEntryPoint;
	}
	
	public ParserRule getEntryPointRule() {
		return getEntryPointAccess().getRule();
	}
	
	//AnyType returns AnyType:
	//    VoidType | DataType;
	public AnyTypeElements getAnyTypeAccess() {
		return pAnyType;
	}
	
	public ParserRule getAnyTypeRule() {
		return getAnyTypeAccess().getRule();
	}
	
	//Statement returns Statement:
	//    AssignVar | SetSpeed | Rotation | Linear | FunCall | Block | SimpleVarDecl | VarDeclInit | LoopStmt | IfStmt | ReturnStmt;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//Expression returns Expression:
	//    And | Add | Or | Sensor | Literal | Speed | Variable | FunCall | Not | Compare | Mul | AriUnOp;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//VarDecl returns VarDecl:
	//    SimpleVarDecl | VarDeclInit;
	public VarDeclElements getVarDeclAccess() {
		return pVarDecl;
	}
	
	public ParserRule getVarDeclRule() {
		return getVarDeclAccess().getRule();
	}
	
	//PrimaryBoolExpr returns PrimaryBoolExpr:
	//    Not | Compare;
	public PrimaryBoolExprElements getPrimaryBoolExprAccess() {
		return pPrimaryBoolExpr;
	}
	
	public ParserRule getPrimaryBoolExprRule() {
		return getPrimaryBoolExprAccess().getRule();
	}
	
	//PrimaryAriExpr returns PrimaryAriExpr:
	//    Sensor | Literal | Speed | Variable | FunCall | AriUnOp;
	public PrimaryAriExprElements getPrimaryAriExprAccess() {
		return pPrimaryAriExpr;
	}
	
	public ParserRule getPrimaryAriExprRule() {
		return getPrimaryAriExprAccess().getRule();
	}
	
	//FunctionDef returns FunctionDef:
	//    'FunctionDef'
	//    name=EString
	//    '{'
	//        'returnType' returnType=AnyType
	//        'block' block=Block
	//        ('inputs' '{' inputs+=SimpleVarDecl ( "," inputs+=SimpleVarDecl)* '}' )?
	//    '}';
	public FunctionDefElements getFunctionDefAccess() {
		return pFunctionDef;
	}
	
	public ParserRule getFunctionDefRule() {
		return getFunctionDefAccess().getRule();
	}
	
	//EString returns ecore::EString:
	//    STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//Block returns Block:
	//    {Block}
	//    'Block'
	//    '{'
	//        ('stmts' '{' stmts+=Statement ( "," stmts+=Statement)* '}' )?
	//    '}';
	public BlockElements getBlockAccess() {
		return pBlock;
	}
	
	public ParserRule getBlockRule() {
		return getBlockAccess().getRule();
	}
	
	//SimpleVarDecl returns SimpleVarDecl:
	//    'SimpleVarDecl'
	//    name=EString
	//    '{'
	//        'type' type=DataType
	//    '}';
	public SimpleVarDeclElements getSimpleVarDeclAccess() {
		return pSimpleVarDecl;
	}
	
	public ParserRule getSimpleVarDeclRule() {
		return getSimpleVarDeclAccess().getRule();
	}
	
	//VoidType returns VoidType:
	//    {VoidType}
	//    'VoidType'
	//    ;
	public VoidTypeElements getVoidTypeAccess() {
		return pVoidType;
	}
	
	public ParserRule getVoidTypeRule() {
		return getVoidTypeAccess().getRule();
	}
	
	//DataType returns DataType:
	//    {DataType}
	//    'DataType'
	//    ;
	public DataTypeElements getDataTypeAccess() {
		return pDataType;
	}
	
	public ParserRule getDataTypeRule() {
		return getDataTypeAccess().getRule();
	}
	
	//AssignVar returns AssignVar:
	//    'AssignVar'
	//    '{'
	//        'var' var=[VarDecl|EString]
	//        'expr' expr=Expression
	//    '}';
	public AssignVarElements getAssignVarAccess() {
		return pAssignVar;
	}
	
	public ParserRule getAssignVarRule() {
		return getAssignVarAccess().getRule();
	}
	
	//SetSpeed returns SetSpeed:
	//    'SetSpeed'
	//    '{'
	//        ('unit' unit=Unit)?
	//        'expr' expr=Expression
	//        'speed' speed=Speed
	//    '}';
	public SetSpeedElements getSetSpeedAccess() {
		return pSetSpeed;
	}
	
	public ParserRule getSetSpeedRule() {
		return getSetSpeedAccess().getRule();
	}
	
	//Rotation returns Rotation:
	//    'Rotation'
	//    '{'
	//        'expr' expr=Expression
	//    '}';
	public RotationElements getRotationAccess() {
		return pRotation;
	}
	
	public ParserRule getRotationRule() {
		return getRotationAccess().getRule();
	}
	
	//Linear returns Linear:
	//    'Linear'
	//    '{'
	//        ('unit' unit=Unit)?
	//        'expr' expr=Expression
	//    '}';
	public LinearElements getLinearAccess() {
		return pLinear;
	}
	
	public ParserRule getLinearRule() {
		return getLinearAccess().getRule();
	}
	
	//FunCall returns FunCall:
	//    'FunCall'
	//    '{'
	//        'fun' fun=[FunctionDef|EString]
	//        ('inputs' '{' inputs+=Expression ( "," inputs+=Expression)* '}' )?
	//    '}';
	public FunCallElements getFunCallAccess() {
		return pFunCall;
	}
	
	public ParserRule getFunCallRule() {
		return getFunCallAccess().getRule();
	}
	
	//VarDeclInit returns VarDeclInit:
	//    'VarDeclInit'
	//    name=EString
	//    '{'
	//        'type' type=DataType
	//        'expr' expr=Expression
	//    '}';
	public VarDeclInitElements getVarDeclInitAccess() {
		return pVarDeclInit;
	}
	
	public ParserRule getVarDeclInitRule() {
		return getVarDeclInitAccess().getRule();
	}
	
	//LoopStmt returns LoopStmt:
	//    'LoopStmt'
	//    '{'
	//        'expr' expr=Expression
	//        'stmt' stmt=Statement
	//    '}';
	public LoopStmtElements getLoopStmtAccess() {
		return pLoopStmt;
	}
	
	public ParserRule getLoopStmtRule() {
		return getLoopStmtAccess().getRule();
	}
	
	//IfStmt returns IfStmt:
	//    'IfStmt'
	//    '{'
	//        'expr' expr=Expression
	//        'ifstmt' ifstmt=Statement
	//        ('elsestmt' elsestmt=Statement)?
	//    '}';
	public IfStmtElements getIfStmtAccess() {
		return pIfStmt;
	}
	
	public ParserRule getIfStmtRule() {
		return getIfStmtAccess().getRule();
	}
	
	//ReturnStmt returns ReturnStmt:
	//    {ReturnStmt}
	//    'ReturnStmt'
	//    '{'
	//        ('expr' expr=Expression)?
	//    '}';
	public ReturnStmtElements getReturnStmtAccess() {
		return pReturnStmt;
	}
	
	public ParserRule getReturnStmtRule() {
		return getReturnStmtAccess().getRule();
	}
	
	//And returns And:
	//    'And'
	//    '{'
	//        'exprs' '{' exprs+=PrimaryBoolExpr ( "," exprs+=PrimaryBoolExpr)* '}'
	//    '}';
	public AndElements getAndAccess() {
		return pAnd;
	}
	
	public ParserRule getAndRule() {
		return getAndAccess().getRule();
	}
	
	//Add returns Add:
	//    'Add'
	//    '{'
	//        'exprs' '{' exprs+=Mul ( "," exprs+=Mul)* '}'
	//    '}';
	public AddElements getAddAccess() {
		return pAdd;
	}
	
	public ParserRule getAddRule() {
		return getAddAccess().getRule();
	}
	
	//Or returns Or:
	//    'Or'
	//    '{'
	//        'exprs' '{' exprs+=And ( "," exprs+=And)* '}'
	//    '}';
	public OrElements getOrAccess() {
		return pOr;
	}
	
	public ParserRule getOrRule() {
		return getOrAccess().getRule();
	}
	
	//Sensor returns Sensor:
	//    {Sensor}
	//    'Sensor'
	//    ;
	public SensorElements getSensorAccess() {
		return pSensor;
	}
	
	public ParserRule getSensorRule() {
		return getSensorAccess().getRule();
	}
	
	//Literal returns Literal:
	//    {Literal}
	//    'Literal'
	//    ;
	public LiteralElements getLiteralAccess() {
		return pLiteral;
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}
	
	//Speed returns Speed:
	//    {Speed}
	//    'Speed'
	//    ;
	public SpeedElements getSpeedAccess() {
		return pSpeed;
	}
	
	public ParserRule getSpeedRule() {
		return getSpeedAccess().getRule();
	}
	
	//Variable returns Variable:
	//    'Variable'
	//    '{'
	//        'var' var=[VarDecl|EString]
	//    '}';
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	//Not returns Not:
	//    'Not'
	//    '{'
	//        'expr' expr=Compare
	//    '}';
	public NotElements getNotAccess() {
		return pNot;
	}
	
	public ParserRule getNotRule() {
		return getNotAccess().getRule();
	}
	
	//Compare returns Compare:
	//    'Compare'
	//    '{'
	//        'exprs' '{' exprs+=Add ( "," exprs+=Add)* '}'
	//    '}';
	public CompareElements getCompareAccess() {
		return pCompare;
	}
	
	public ParserRule getCompareRule() {
		return getCompareAccess().getRule();
	}
	
	//Mul returns Mul:
	//    'Mul'
	//    '{'
	//        'exprs' '{' exprs+=PrimaryAriExpr ( "," exprs+=PrimaryAriExpr)* '}'
	//    '}';
	public MulElements getMulAccess() {
		return pMul;
	}
	
	public ParserRule getMulRule() {
		return getMulAccess().getRule();
	}
	
	//AriUnOp returns AriUnOp:
	//    'AriUnOp'
	//    '{'
	//        'expr' expr=Expression
	//    '}';
	public AriUnOpElements getAriUnOpAccess() {
		return pAriUnOp;
	}
	
	public ParserRule getAriUnOpRule() {
		return getAriUnOpAccess().getRule();
	}
	
	//enum Unit returns Unit:
	//                m = 'm' | dm = 'dm' | cm = 'cm' | mm = 'mm';
	public UnitElements getUnitAccess() {
		return eUnit;
	}
	
	public EnumRule getUnitRule() {
		return getUnitAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
