/**
 * generated by Xtext 2.32.0
 */
package robotScript.formatting2;

import com.google.inject.Inject;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import robotScript.services.RobotScriptGrammarAccess;
import robotScriptModel.AnyType;
import robotScriptModel.Block;
import robotScriptModel.EntryPoint;
import robotScriptModel.FunctionDef;
import robotScriptModel.SimpleVarDecl;

@SuppressWarnings("all")
public class RobotScriptFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private RobotScriptGrammarAccess _robotScriptGrammarAccess;

  protected void _format(final EntryPoint entryPoint, @Extension final IFormattableDocument document) {
    EList<FunctionDef> _functions = entryPoint.getFunctions();
    for (final FunctionDef functionDef : _functions) {
      document.<FunctionDef>format(functionDef);
    }
  }

  protected void _format(final FunctionDef functionDef, @Extension final IFormattableDocument document) {
    document.<AnyType>format(functionDef.getReturnType());
    document.<Block>format(functionDef.getBlock());
    EList<SimpleVarDecl> _inputs = functionDef.getInputs();
    for (final SimpleVarDecl simpleVarDecl : _inputs) {
      document.<SimpleVarDecl>format(simpleVarDecl);
    }
  }

  public void format(final Object entryPoint, final IFormattableDocument document) {
    if (entryPoint instanceof XtextResource) {
      _format((XtextResource)entryPoint, document);
      return;
    } else if (entryPoint instanceof EntryPoint) {
      _format((EntryPoint)entryPoint, document);
      return;
    } else if (entryPoint instanceof FunctionDef) {
      _format((FunctionDef)entryPoint, document);
      return;
    } else if (entryPoint instanceof EObject) {
      _format((EObject)entryPoint, document);
      return;
    } else if (entryPoint == null) {
      _format((Void)null, document);
      return;
    } else if (entryPoint != null) {
      _format(entryPoint, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(entryPoint, document).toString());
    }
  }
}
